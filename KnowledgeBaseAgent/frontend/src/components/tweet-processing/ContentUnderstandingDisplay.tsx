import React, { useState } from 'react';\nimport { \n  SparklesIcon, \n  LightBulbIcon, \n  TagIcon, \n  ChartBarIcon,\n  ClipboardDocumentIcon,\n  FaceSmileIcon,\n  FaceFrownIcon,\n  MinusIcon,\n  AcademicCapIcon,\n  BookOpenIcon,\n  PuzzlePieceIcon\n} from '@heroicons/react/24/outline';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { ProgressBar } from '../ui/ProgressBar';\nimport { cn } from '../../utils/cn';\n\nexport interface ContentUnderstandingData {\n  summary: string;\n  keyInsights: string[];\n  mainTopics: string[];\n  technicalConcepts?: string[];\n  sentiment: {\n    overall: 'positive' | 'negative' | 'neutral';\n    confidence: number;\n    aspects: Array<{\n      aspect: string;\n      sentiment: string;\n      confidence: number;\n    }>;\n  };\n  complexity: {\n    level: 'low' | 'medium' | 'high';\n    score: number;\n    factors: string[];\n  };\n  model: string;\n  processingTime: number;\n}\n\nexport interface ContentUnderstandingDisplayProps {\n  understanding: ContentUnderstandingData;\n  onCopy?: (text: string, label: string) => void;\n  copiedText?: string | null;\n  className?: string;\n}\n\nconst getSentimentIcon = (sentiment: string) => {\n  switch (sentiment.toLowerCase()) {\n    case 'positive': return FaceSmileIcon;\n    case 'negative': return FaceFrownIcon;\n    default: return MinusIcon;\n  }\n};\n\nconst getSentimentColor = (sentiment: string) => {\n  switch (sentiment.toLowerCase()) {\n    case 'positive': return 'text-green-600 bg-green-100';\n    case 'negative': return 'text-red-600 bg-red-100';\n    default: return 'text-gray-600 bg-gray-100';\n  }\n};\n\nconst getComplexityColor = (level: string) => {\n  switch (level.toLowerCase()) {\n    case 'high': return 'text-red-600 bg-red-100';\n    case 'medium': return 'text-yellow-600 bg-yellow-100';\n    default: return 'text-green-600 bg-green-100';\n  }\n};\n\nconst getComplexityIcon = (level: string) => {\n  switch (level.toLowerCase()) {\n    case 'high': return AcademicCapIcon;\n    case 'medium': return BookOpenIcon;\n    default: return PuzzlePieceIcon;\n  }\n};\n\nexport const ContentUnderstandingDisplay: React.FC<ContentUnderstandingDisplayProps> = ({\n  understanding,\n  onCopy,\n  copiedText,\n  className\n}) => {\n  const [activeSection, setActiveSection] = useState<'summary' | 'insights' | 'sentiment' | 'complexity'>('summary');\n\n  const SentimentIcon = getSentimentIcon(understanding.sentiment.overall);\n  const ComplexityIcon = getComplexityIcon(understanding.complexity.level);\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <SparklesIcon className=\"h-5 w-5 text-primary\" />\n              <span>Content Understanding</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <span>Model: {understanding.model}</span>\n              <span>â€¢</span>\n              <span>{understanding.processingTime}ms</span>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Sentiment Overview */}\n            <div className=\"flex items-center gap-3\">\n              <div className={cn(\n                'p-2 rounded-full',\n                getSentimentColor(understanding.sentiment.overall)\n              )}>\n                <SentimentIcon className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-foreground capitalize\">\n                  {understanding.sentiment.overall} Sentiment\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {(understanding.sentiment.confidence * 100).toFixed(0)}% confidence\n                </div>\n              </div>\n            </div>\n\n            {/* Complexity Overview */}\n            <div className=\"flex items-center gap-3\">\n              <div className={cn(\n                'p-2 rounded-full',\n                getComplexityColor(understanding.complexity.level)\n              )}>\n                <ComplexityIcon className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-foreground capitalize\">\n                  {understanding.complexity.level} Complexity\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Score: {understanding.complexity.score.toFixed(1)}/10\n                </div>\n              </div>\n            </div>\n\n            {/* Topics Count */}\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 rounded-full bg-blue-100 text-blue-600\">\n                <TagIcon className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-foreground\">\n                  {understanding.mainTopics.length} Main Topics\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {understanding.keyInsights.length} key insights\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section Navigation */}\n      <div className=\"flex items-center gap-1 border-b border-white/10\">\n        {[\n          { id: 'summary', label: 'Summary', icon: BookOpenIcon },\n          { id: 'insights', label: 'Key Insights', icon: LightBulbIcon },\n          { id: 'sentiment', label: 'Sentiment Analysis', icon: SentimentIcon },\n          { id: 'complexity', label: 'Complexity Analysis', icon: ComplexityIcon }\n        ].map((section) => {\n          const Icon = section.icon;\n          return (\n            <button\n              key={section.id}\n              onClick={() => setActiveSection(section.id as any)}\n              className={cn(\n                'flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-t-lg transition-all',\n                activeSection === section.id\n                  ? 'bg-primary/20 text-primary border-b-2 border-primary'\n                  : 'text-muted-foreground hover:text-foreground hover:bg-white/5'\n              )}\n            >\n              <Icon className=\"h-4 w-4\" />\n              {section.label}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Content Sections */}\n      <div className=\"space-y-4\">\n        {/* Summary Section */}\n        {activeSection === 'summary' && (\n          <div className=\"space-y-4\">\n            {/* AI Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <SparklesIcon className=\"h-5 w-5 text-primary\" />\n                    <span>AI-Generated Summary</span>\n                  </div>\n                  {onCopy && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onCopy(understanding.summary, 'Summary')}\n                    >\n                      <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                      {copiedText === 'Summary' ? 'Copied!' : 'Copy'}\n                    </Button>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"prose prose-sm max-w-none text-foreground\">\n                  <p className=\"leading-relaxed\">{understanding.summary}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Main Topics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TagIcon className=\"h-5 w-5 text-primary\" />\n                  <span>Main Topics</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-2\">\n                  {understanding.mainTopics.map((topic, index) => (\n                    <span\n                      key={index}\n                      className=\"text-sm px-3 py-1 bg-primary/20 text-primary rounded-full border border-primary/30\"\n                    >\n                      {topic}\n                    </span>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Technical Concepts */}\n            {understanding.technicalConcepts && understanding.technicalConcepts.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <AcademicCapIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Technical Concepts</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {understanding.technicalConcepts.map((concept, index) => (\n                      <span\n                        key={index}\n                        className=\"text-sm px-3 py-1 bg-blue-100 text-blue-800 rounded-full border border-blue-200\"\n                      >\n                        {concept}\n                      </span>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Key Insights Section */}\n        {activeSection === 'insights' && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <LightBulbIcon className=\"h-5 w-5 text-primary\" />\n                  <span>Key Insights</span>\n                </div>\n                {onCopy && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onCopy(understanding.keyInsights.join('\\n'), 'Key Insights')}\n                  >\n                    <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                    {copiedText === 'Key Insights' ? 'Copied!' : 'Copy All'}\n                  </Button>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {understanding.keyInsights.map((insight, index) => (\n                  <div key={index} className=\"flex items-start gap-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200\">\n                    <div className=\"flex-shrink-0 w-6 h-6 bg-yellow-500 text-white rounded-full flex items-center justify-center text-xs font-bold\">\n                      {index + 1}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-foreground leading-relaxed\">{insight}</p>\n                    </div>\n                    {onCopy && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onCopy(insight, `Insight ${index + 1}`)}\n                        className=\"flex-shrink-0\"\n                      >\n                        <ClipboardDocumentIcon className=\"h-3 w-3\" />\n                      </Button>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Sentiment Analysis Section */}\n        {activeSection === 'sentiment' && (\n          <div className=\"space-y-4\">\n            {/* Overall Sentiment */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <SentimentIcon className=\"h-5 w-5 text-primary\" />\n                  <span>Overall Sentiment Analysis</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={cn(\n                      'p-3 rounded-full',\n                      getSentimentColor(understanding.sentiment.overall)\n                    )}>\n                      <SentimentIcon className=\"h-6 w-6\" />\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-semibold text-foreground capitalize\">\n                        {understanding.sentiment.overall} Sentiment\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Detected with {(understanding.sentiment.confidence * 100).toFixed(0)}% confidence\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Confidence Level</span>\n                    <span className=\"font-medium\">\n                      {understanding.sentiment.confidence >= 0.8 ? 'High' :\n                       understanding.sentiment.confidence >= 0.6 ? 'Medium' : 'Low'}\n                    </span>\n                  </div>\n                  <ProgressBar\n                    value={understanding.sentiment.confidence * 100}\n                    variant={understanding.sentiment.confidence >= 0.7 ? 'success' : 'default'}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Aspect-based Sentiment */}\n            {understanding.sentiment.aspects && understanding.sentiment.aspects.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <ChartBarIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Aspect-based Sentiment</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {understanding.sentiment.aspects.map((aspect, index) => {\n                      const AspectIcon = getSentimentIcon(aspect.sentiment);\n                      return (\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className={cn(\n                              'p-1.5 rounded-full',\n                              getSentimentColor(aspect.sentiment)\n                            )}>\n                              <AspectIcon className=\"h-4 w-4\" />\n                            </div>\n                            <div>\n                              <div className=\"text-sm font-medium text-foreground\">{aspect.aspect}</div>\n                              <div className=\"text-xs text-muted-foreground capitalize\">\n                                {aspect.sentiment} sentiment\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm font-medium text-foreground\">\n                              {(aspect.confidence * 100).toFixed(0)}%\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">confidence</div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Complexity Analysis Section */}\n        {activeSection === 'complexity' && (\n          <div className=\"space-y-4\">\n            {/* Complexity Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ComplexityIcon className=\"h-5 w-5 text-primary\" />\n                  <span>Content Complexity Analysis</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className={cn(\n                      'p-3 rounded-full',\n                      getComplexityColor(understanding.complexity.level)\n                    )}>\n                      <ComplexityIcon className=\"h-6 w-6\" />\n                    </div>\n                    <div>\n                      <div className=\"text-lg font-semibold text-foreground capitalize\">\n                        {understanding.complexity.level} Complexity\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Complexity score: {understanding.complexity.score.toFixed(1)}/10\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Complexity Score</span>\n                    <span className=\"font-medium\">{understanding.complexity.score.toFixed(1)}/10</span>\n                  </div>\n                  <ProgressBar\n                    value={(understanding.complexity.score / 10) * 100}\n                    variant={understanding.complexity.score >= 7 ? 'error' : understanding.complexity.score >= 4 ? 'default' : 'success'}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Complexity Factors */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <PuzzlePieceIcon className=\"h-5 w-5 text-primary\" />\n                  <span>Complexity Factors</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm text-muted-foreground mb-3\">\n                    Factors contributing to the complexity assessment:\n                  </div>\n                  <div className=\"space-y-2\">\n                    {understanding.complexity.factors.map((factor, index) => (\n                      <div key={index} className=\"flex items-start gap-2 p-2 bg-gray-50 rounded\">\n                        <div className=\"flex-shrink-0 w-5 h-5 bg-gray-400 text-white rounded-full flex items-center justify-center text-xs font-bold mt-0.5\">\n                          {index + 1}\n                        </div>\n                        <span className=\"text-sm text-foreground\">{factor}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};"