import React, { useState } from 'react';\nimport { \n  EyeIcon, \n  PhotoIcon, \n  PlayIcon, \n  DocumentTextIcon,\n  TagIcon,\n  ChartBarIcon,\n  ClipboardDocumentIcon,\n  MagnifyingGlassIcon,\n  SparklesIcon\n} from '@heroicons/react/24/outline';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';\nimport { Button } from '../ui/Button';\nimport { ProgressBar } from '../ui/ProgressBar';\nimport { cn } from '../../utils/cn';\n\nexport interface MediaAnalysisData {\n  items: Array<{\n    mediaId: string;\n    mediaType: string;\n    analysis: string;\n    confidence: number;\n    detectedObjects?: string[];\n    extractedText?: string;\n    visualDescription: string;\n    technicalDetails?: string;\n    emotionalTone?: string;\n    keyElements?: string[];\n    contextRelevance?: string;\n  }>;\n  model: string;\n  processingTime: number;\n}\n\nexport interface MediaAnalysisVisualizationProps {\n  analysis: MediaAnalysisData;\n  onCopy?: (text: string, label: string) => void;\n  copiedText?: string | null;\n  className?: string;\n}\n\nconst getMediaIcon = (mediaType: string) => {\n  switch (mediaType.toLowerCase()) {\n    case 'photo':\n    case 'image':\n      return PhotoIcon;\n    case 'video':\n      return PlayIcon;\n    default:\n      return PhotoIcon;\n  }\n};\n\nconst getConfidenceColor = (confidence: number) => {\n  if (confidence >= 0.8) return 'text-green-600 bg-green-100';\n  if (confidence >= 0.6) return 'text-yellow-600 bg-yellow-100';\n  return 'text-red-600 bg-red-100';\n};\n\nconst getConfidenceLabel = (confidence: number) => {\n  if (confidence >= 0.9) return 'Very High';\n  if (confidence >= 0.8) return 'High';\n  if (confidence >= 0.6) return 'Medium';\n  if (confidence >= 0.4) return 'Low';\n  return 'Very Low';\n};\n\nexport const MediaAnalysisVisualization: React.FC<MediaAnalysisVisualizationProps> = ({\n  analysis,\n  onCopy,\n  copiedText,\n  className\n}) => {\n  const [selectedItem, setSelectedItem] = useState<number>(0);\n  const [activeSection, setActiveSection] = useState<'overview' | 'details' | 'objects' | 'text'>('overview');\n\n  const currentItem = analysis.items[selectedItem];\n  const MediaIcon = getMediaIcon(currentItem?.mediaType || 'photo');\n\n  if (!analysis.items.length) {\n    return (\n      <Card className={cn('p-8 text-center', className)}>\n        <PhotoIcon className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <p className=\"text-muted-foreground\">No media analysis results available</p>\n      </Card>\n    );\n  }\n\n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <EyeIcon className=\"h-5 w-5 text-primary\" />\n              <span>Media Analysis Results</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <span>Model: {analysis.model}</span>\n              <span>â€¢</span>\n              <span>{analysis.processingTime}ms</span>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              {analysis.items.length} media {analysis.items.length === 1 ? 'item' : 'items'} analyzed\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">Average Confidence:</span>\n              <span className={cn(\n                'text-sm px-2 py-1 rounded-full',\n                getConfidenceColor(analysis.items.reduce((sum, item) => sum + item.confidence, 0) / analysis.items.length)\n              )}>\n                {((analysis.items.reduce((sum, item) => sum + item.confidence, 0) / analysis.items.length) * 100).toFixed(0)}%\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Media Item Selector */}\n      {analysis.items.length > 1 && (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2 overflow-x-auto\">\n              {analysis.items.map((item, index) => {\n                const ItemIcon = getMediaIcon(item.mediaType);\n                return (\n                  <button\n                    key={item.mediaId}\n                    onClick={() => setSelectedItem(index)}\n                    className={cn(\n                      'flex items-center gap-2 px-3 py-2 rounded-lg border transition-all whitespace-nowrap',\n                      selectedItem === index\n                        ? 'bg-primary/20 border-primary/30 text-primary'\n                        : 'bg-white/5 border-gray-200 text-muted-foreground hover:bg-white/10'\n                    )}\n                  >\n                    <ItemIcon className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">\n                      {item.mediaType} {index + 1}\n                    </span>\n                    <span className={cn(\n                      'text-xs px-1.5 py-0.5 rounded-full',\n                      getConfidenceColor(item.confidence)\n                    )}>\n                      {(item.confidence * 100).toFixed(0)}%\n                    </span>\n                  </button>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Section Navigation */}\n      <div className=\"flex items-center gap-1 border-b border-white/10\">\n        {[\n          { id: 'overview', label: 'Overview', icon: EyeIcon },\n          { id: 'details', label: 'Details', icon: DocumentTextIcon },\n          ...(currentItem?.detectedObjects?.length ? [{ id: 'objects', label: 'Objects', icon: TagIcon }] : []),\n          ...(currentItem?.extractedText ? [{ id: 'text', label: 'Text', icon: DocumentTextIcon }] : [])\n        ].map((section) => {\n          const Icon = section.icon;\n          return (\n            <button\n              key={section.id}\n              onClick={() => setActiveSection(section.id as any)}\n              className={cn(\n                'flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-t-lg transition-all',\n                activeSection === section.id\n                  ? 'bg-primary/20 text-primary border-b-2 border-primary'\n                  : 'text-muted-foreground hover:text-foreground hover:bg-white/5'\n              )}\n            >\n              <Icon className=\"h-4 w-4\" />\n              {section.label}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Content Sections */}\n      <div className=\"space-y-4\">\n        {/* Overview Section */}\n        {activeSection === 'overview' && currentItem && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            {/* Visual Description */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <MediaIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Visual Description</span>\n                  </div>\n                  {onCopy && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onCopy(currentItem.visualDescription, 'Visual Description')}\n                    >\n                      <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                      {copiedText === 'Visual Description' ? 'Copied!' : 'Copy'}\n                    </Button>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-sm text-foreground leading-relaxed\">\n                  {currentItem.visualDescription}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Analysis Confidence */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ChartBarIcon className=\"h-5 w-5 text-primary\" />\n                  <span>Analysis Confidence</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Overall Confidence</span>\n                    <span className={cn(\n                      'text-sm font-medium px-2 py-1 rounded-full',\n                      getConfidenceColor(currentItem.confidence)\n                    )}>\n                      {getConfidenceLabel(currentItem.confidence)}\n                    </span>\n                  </div>\n                  <ProgressBar\n                    value={currentItem.confidence * 100}\n                    variant={currentItem.confidence >= 0.7 ? 'success' : currentItem.confidence >= 0.5 ? 'default' : 'error'}\n                  />\n                  <div className=\"text-xs text-muted-foreground\">\n                    {(currentItem.confidence * 100).toFixed(1)}% confidence in analysis accuracy\n                  </div>\n                </div>\n\n                {/* Media Type Info */}\n                <div className=\"pt-4 border-t border-white/10\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Media Type</span>\n                    <span className=\"text-sm font-medium capitalize\">{currentItem.mediaType}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Key Elements */}\n            {currentItem.keyElements && currentItem.keyElements.length > 0 && (\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <SparklesIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Key Elements</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {currentItem.keyElements.map((element, index) => (\n                      <span\n                        key={index}\n                        className=\"text-sm px-3 py-1 bg-blue-100 text-blue-800 rounded-full border border-blue-200\"\n                      >\n                        {element}\n                      </span>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Details Section */}\n        {activeSection === 'details' && currentItem && (\n          <div className=\"space-y-4\">\n            {/* Full Analysis */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <DocumentTextIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Detailed Analysis</span>\n                  </div>\n                  {onCopy && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onCopy(currentItem.analysis, 'Detailed Analysis')}\n                    >\n                      <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                      {copiedText === 'Detailed Analysis' ? 'Copied!' : 'Copy'}\n                    </Button>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"prose prose-sm max-w-none text-foreground\">\n                  <p className=\"whitespace-pre-wrap\">{currentItem.analysis}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Technical Details */}\n            {currentItem.technicalDetails && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MagnifyingGlassIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Technical Details</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-foreground\">{currentItem.technicalDetails}</p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Emotional Tone */}\n            {currentItem.emotionalTone && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <SparklesIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Emotional Tone</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-foreground\">{currentItem.emotionalTone}</p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Context Relevance */}\n            {currentItem.contextRelevance && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TagIcon className=\"h-5 w-5 text-primary\" />\n                    <span>Context Relevance</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-foreground\">{currentItem.contextRelevance}</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Objects Section */}\n        {activeSection === 'objects' && currentItem?.detectedObjects && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TagIcon className=\"h-5 w-5 text-primary\" />\n                <span>Detected Objects</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {currentItem.detectedObjects.length} objects detected in this media\n                </div>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n                  {currentItem.detectedObjects.map((object, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center gap-2 p-2 bg-gray-50 rounded-lg border\"\n                    >\n                      <TagIcon className=\"h-4 w-4 text-gray-500\" />\n                      <span className=\"text-sm text-foreground\">{object}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Text Section */}\n        {activeSection === 'text' && currentItem?.extractedText && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <DocumentTextIcon className=\"h-5 w-5 text-primary\" />\n                  <span>Extracted Text</span>\n                </div>\n                {onCopy && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onCopy(currentItem.extractedText!, 'Extracted Text')}\n                  >\n                    <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                    {copiedText === 'Extracted Text' ? 'Copied!' : 'Copy'}\n                  </Button>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Text content extracted from the media using OCR\n                </div>\n                <div className=\"p-4 bg-gray-50 rounded-lg border\">\n                  <p className=\"text-sm text-foreground font-mono whitespace-pre-wrap\">\n                    {currentItem.extractedText}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};"