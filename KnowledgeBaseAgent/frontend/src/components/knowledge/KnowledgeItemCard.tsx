import React, { useState } from 'react';
import { \n  HeartIcon,\n  ArrowPathRoundedSquareIcon,\n  ChatBubbleLeftIcon,\n  ShareIcon,\n  PhotoIcon,\n  PlayIcon,\n  DocumentTextIcon,\n  TagIcon,\n  CalendarIcon,\n  UserIcon,\n  LinkIcon,\n  CheckIcon\n} from '@heroicons/react/24/outline';\nimport { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';\nimport { GlassCard } from '@/components/ui/GlassCard';\nimport { Button } from '@/components/ui/Button';\nimport { StatusBadge } from '@/components/ui/StatusBadge';\nimport { Tooltip } from '@/components/ui/Tooltip';\nimport { cn } from '@/utils/cn';\nimport type { KnowledgeItem } from '@/types';\n\nexport interface KnowledgeItemCardProps {\n  item: KnowledgeItem;\n  viewMode: 'grid' | 'list';\n  isSelected?: boolean;\n  isHighlighted?: boolean;\n  onSelect?: () => void;\n  onToggleSelection?: () => void;\n  searchQuery?: string;\n  className?: string;\n}\n\nconst formatNumber = (num: number): string => {\n  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n  if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n  return num.toString();\n};\n\nconst formatDate = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n  \n  if (diffDays === 0) return 'Today';\n  if (diffDays === 1) return 'Yesterday';\n  if (diffDays < 7) return `${diffDays} days ago`;\n  if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n  if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;\n  return `${Math.floor(diffDays / 365)} years ago`;\n};\n\nconst highlightText = (text: string, query: string): React.ReactNode => {\n  if (!query.trim()) return text;\n  \n  const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n  const parts = text.split(regex);\n  \n  return parts.map((part, index) => \n    regex.test(part) ? (\n      <mark key={index} className=\"bg-yellow-200/50 text-yellow-900 px-0.5 rounded\">\n        {part}\n      </mark>\n    ) : part\n  );\n};\n\nconst getContentTypeIcon = (contentType: string) => {\n  switch (contentType) {\n    case 'tweet':\n      return <DocumentTextIcon className=\"h-4 w-4\" />;\n    case 'thread':\n      return <LinkIcon className=\"h-4 w-4\" />;\n    case 'media':\n      return <PhotoIcon className=\"h-4 w-4\" />;\n    case 'video':\n      return <PlayIcon className=\"h-4 w-4\" />;\n    default:\n      return <DocumentTextIcon className=\"h-4 w-4\" />;\n  }\n};\n\nconst getProcessingStatusColor = (status: string) => {\n  switch (status) {\n    case 'completed':\n      return 'text-green-500';\n    case 'processing':\n      return 'text-blue-500';\n    case 'failed':\n      return 'text-red-500';\n    default:\n      return 'text-gray-500';\n  }\n};\n\nexport const KnowledgeItemCard: React.FC<KnowledgeItemCardProps> = ({\n  item,\n  viewMode,\n  isSelected = false,\n  isHighlighted = false,\n  onSelect,\n  onToggleSelection,\n  searchQuery = '',\n  className\n}) => {\n  const [imageError, setImageError] = useState(false);\n  \n  // Extract engagement metrics\n  const engagement = {\n    likes: item.like_count || 0,\n    retweets: item.retweet_count || 0,\n    replies: item.reply_count || 0,\n    quotes: item.quote_count || 0\n  };\n  \n  const totalEngagement = engagement.likes + engagement.retweets + engagement.replies + engagement.quotes;\n  \n  // Check if item has media\n  const hasMedia = item.media_content && item.media_content.length > 0;\n  const mediaCount = hasMedia ? item.media_content.length : 0;\n  \n  // Get first media item for preview\n  const previewMedia = hasMedia ? item.media_content[0] : null;\n  \n  // Determine if this is a thread\n  const isThread = item.thread_id && item.thread_length && item.thread_length > 1;\n  \n  if (viewMode === 'list') {\n    return (\n      <GlassCard \n        className={cn(\n          'p-4 cursor-pointer transition-all duration-200 hover:shadow-lg',\n          isHighlighted && 'ring-2 ring-primary/50 bg-primary/5',\n          isSelected && 'ring-2 ring-blue-500/50 bg-blue-500/5',\n          className\n        )}\n        onClick={onSelect}\n      >\n        <div className=\"flex gap-4\">\n          {/* Selection Checkbox */}\n          {onToggleSelection && (\n            <div className=\"flex-shrink-0 pt-1\">\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onToggleSelection();\n                }}\n                className={cn(\n                  'w-5 h-5 rounded border-2 flex items-center justify-center transition-all',\n                  isSelected \n                    ? 'bg-blue-500 border-blue-500 text-white' \n                    : 'border-gray-300 hover:border-blue-400'\n                )}\n              >\n                {isSelected && <CheckIcon className=\"h-3 w-3\" />}\n              </button>\n            </div>\n          )}\n          \n          {/* Media Preview */}\n          {hasMedia && previewMedia && !imageError && (\n            <div className=\"flex-shrink-0\">\n              <div className=\"w-16 h-16 rounded-lg overflow-hidden bg-gray-100\">\n                {previewMedia.type === 'photo' ? (\n                  <img\n                    src={previewMedia.url}\n                    alt=\"Media preview\"\n                    className=\"w-full h-full object-cover\"\n                    onError={() => setImageError(true)}\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center bg-gray-200\">\n                    {previewMedia.type === 'video' ? (\n                      <PlayIcon className=\"h-6 w-6 text-gray-500\" />\n                    ) : (\n                      <PhotoIcon className=\"h-6 w-6 text-gray-500\" />\n                    )}\n                  </div>\n                )}\n              </div>\n              {mediaCount > 1 && (\n                <div className=\"text-xs text-muted-foreground mt-1 text-center\">\n                  +{mediaCount - 1} more\n                </div>\n              )}\n            </div>\n          )}\n          \n          {/* Content */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between gap-4 mb-2\">\n              <div className=\"flex-1\">\n                <h3 className=\"font-medium text-foreground line-clamp-2 mb-1\">\n                  {highlightText(item.title, searchQuery)}\n                </h3>\n                <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                  {highlightText(item.content.substring(0, 200) + (item.content.length > 200 ? '...' : ''), searchQuery)}\n                </p>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <StatusBadge \n                  status={item.processing_state as any} \n                  size=\"sm\" \n                />\n                {getContentTypeIcon(item.content_type)}\n              </div>\n            </div>\n            \n            {/* Metadata */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                {/* Author */}\n                {item.author_username && (\n                  <div className=\"flex items-center gap-1\">\n                    <UserIcon className=\"h-3 w-3\" />\n                    <span>@{item.author_username}</span>\n                  </div>\n                )}\n                \n                {/* Date */}\n                <div className=\"flex items-center gap-1\">\n                  <CalendarIcon className=\"h-3 w-3\" />\n                  <span>{formatDate(item.created_at)}</span>\n                </div>\n                \n                {/* Thread indicator */}\n                {isThread && (\n                  <div className=\"flex items-center gap-1\">\n                    <LinkIcon className=\"h-3 w-3\" />\n                    <span>{item.thread_length} tweets</span>\n                  </div>\n                )}\n                \n                {/* Category */}\n                {item.main_category && (\n                  <div className=\"flex items-center gap-1\">\n                    <TagIcon className=\"h-3 w-3\" />\n                    <span>{item.main_category}</span>\n                  </div>\n                )}\n              </div>\n              \n              {/* Engagement */}\n              {totalEngagement > 0 && (\n                <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n                  {engagement.likes > 0 && (\n                    <div className=\"flex items-center gap-1\">\n                      <HeartIcon className=\"h-3 w-3\" />\n                      <span>{formatNumber(engagement.likes)}</span>\n                    </div>\n                  )}\n                  {engagement.retweets > 0 && (\n                    <div className=\"flex items-center gap-1\">\n                      <ArrowPathRoundedSquareIcon className=\"h-3 w-3\" />\n                      <span>{formatNumber(engagement.retweets)}</span>\n                    </div>\n                  )}\n                  {engagement.replies > 0 && (\n                    <div className=\"flex items-center gap-1\">\n                      <ChatBubbleLeftIcon className=\"h-3 w-3\" />\n                      <span>{formatNumber(engagement.replies)}</span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </GlassCard>\n    );\n  }\n  \n  // Grid view\n  return (\n    <GlassCard \n      className={cn(\n        'p-4 cursor-pointer transition-all duration-200 hover:shadow-lg',\n        isHighlighted && 'ring-2 ring-primary/50 bg-primary/5',\n        isSelected && 'ring-2 ring-blue-500/50 bg-blue-500/5',\n        className\n      )}\n      onClick={onSelect}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center gap-2\">\n          {getContentTypeIcon(item.content_type)}\n          <StatusBadge \n            status={item.processing_state as any} \n            size=\"sm\" \n          />\n          {isThread && (\n            <Tooltip content={`Thread with ${item.thread_length} tweets`}>\n              <div className=\"flex items-center gap-1 text-xs text-blue-500\">\n                <LinkIcon className=\"h-3 w-3\" />\n                <span>{item.thread_length}</span>\n              </div>\n            </Tooltip>\n          )}\n        </div>\n        \n        {onToggleSelection && (\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onToggleSelection();\n            }}\n            className={cn(\n              'w-5 h-5 rounded border-2 flex items-center justify-center transition-all',\n              isSelected \n                ? 'bg-blue-500 border-blue-500 text-white' \n                : 'border-gray-300 hover:border-blue-400'\n            )}\n          >\n            {isSelected && <CheckIcon className=\"h-3 w-3\" />}\n          </button>\n        )}\n      </div>\n      \n      {/* Media Preview */}\n      {hasMedia && previewMedia && !imageError && (\n        <div className=\"mb-3\">\n          <div className=\"aspect-video rounded-lg overflow-hidden bg-gray-100 relative\">\n            {previewMedia.type === 'photo' ? (\n              <img\n                src={previewMedia.url}\n                alt=\"Media preview\"\n                className=\"w-full h-full object-cover\"\n                onError={() => setImageError(true)}\n              />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center bg-gray-200\">\n                {previewMedia.type === 'video' ? (\n                  <PlayIcon className=\"h-8 w-8 text-gray-500\" />\n                ) : (\n                  <PhotoIcon className=\"h-8 w-8 text-gray-500\" />\n                )}\n              </div>\n            )}\n            {mediaCount > 1 && (\n              <div className=\"absolute top-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded\">\n                +{mediaCount - 1}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {/* Content */}\n      <div className=\"mb-3\">\n        <h3 className=\"font-medium text-foreground line-clamp-2 mb-2\">\n          {highlightText(item.title, searchQuery)}\n        </h3>\n        <p className=\"text-sm text-muted-foreground line-clamp-4\">\n          {highlightText(item.content.substring(0, 150) + (item.content.length > 150 ? '...' : ''), searchQuery)}\n        </p>\n      </div>\n      \n      {/* Categories */}\n      {(item.main_category || item.sub_category) && (\n        <div className=\"flex items-center gap-2 mb-3\">\n          {item.main_category && (\n            <span className=\"text-xs px-2 py-1 bg-primary/20 text-primary rounded-full\">\n              {item.main_category}\n            </span>\n          )}\n          {item.sub_category && (\n            <span className=\"text-xs px-2 py-1 bg-gray-500/20 text-gray-500 rounded-full\">\n              {item.sub_category}\n            </span>\n          )}\n        </div>\n      )}\n      \n      {/* Footer */}\n      <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n        <div className=\"flex items-center gap-2\">\n          {item.author_username && (\n            <div className=\"flex items-center gap-1\">\n              <UserIcon className=\"h-3 w-3\" />\n              <span>@{item.author_username}</span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-1\">\n            <CalendarIcon className=\"h-3 w-3\" />\n            <span>{formatDate(item.created_at)}</span>\n          </div>\n        </div>\n        \n        {/* Engagement */}\n        {totalEngagement > 0 && (\n          <div className=\"flex items-center gap-2\">\n            {engagement.likes > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <HeartIcon className=\"h-3 w-3\" />\n                <span>{formatNumber(engagement.likes)}</span>\n              </div>\n            )}\n            {engagement.retweets > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <ArrowPathRoundedSquareIcon className=\"h-3 w-3\" />\n                <span>{formatNumber(engagement.retweets)}</span>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </GlassCard>\n  );\n};"