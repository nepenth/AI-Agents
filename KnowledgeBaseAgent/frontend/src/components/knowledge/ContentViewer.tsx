import React, { useState, useEffect } from 'react';\nimport { \n  XMarkIcon, \n  ArrowTopRightOnSquareIcon,\n  HeartIcon,\n  ArrowPathRoundedSquareIcon,\n  ChatBubbleLeftIcon,\n  ShareIcon,\n  PhotoIcon,\n  PlayIcon,\n  DocumentTextIcon,\n  TagIcon,\n  CalendarIcon,\n  UserIcon,\n  LinkIcon,\n  SparklesIcon,\n  EyeIcon,\n  ClipboardDocumentIcon\n} from '@heroicons/react/24/outline';\nimport { HeartIcon as HeartSolidIcon } from '@heroicons/react/24/solid';\nimport { GlassCard } from '@/components/ui/GlassCard';\nimport { Button } from '@/components/ui/Button';\nimport { StatusBadge } from '@/components/ui/StatusBadge';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Tooltip } from '@/components/ui/Tooltip';\nimport { useKnowledgeStore } from '@/stores/knowledgeStore';\nimport { cn } from '@/utils/cn';\nimport type { KnowledgeItem } from '@/types';\n\nexport interface ContentViewerProps {\n  itemId: string | null;\n  onClose?: () => void;\n  className?: string;\n}\n\nconst formatNumber = (num: number): string => {\n  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;\n  if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;\n  return num.toString();\n};\n\nconst formatDate = (dateString: string): string => {\n  return new Date(dateString).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\nconst copyToClipboard = async (text: string) => {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (err) {\n    console.error('Failed to copy text: ', err);\n    return false;\n  }\n};\n\nexport const ContentViewer: React.FC<ContentViewerProps> = ({\n  itemId,\n  onClose,\n  className\n}) => {\n  const { currentKnowledgeItem, loading, loadKnowledgeItem } = useKnowledgeStore();\n  const [activeTab, setActiveTab] = useState<'content' | 'analysis' | 'media' | 'thread'>('content');\n  const [copiedText, setCopiedText] = useState<string | null>(null);\n  \n  // Load item when itemId changes\n  useEffect(() => {\n    if (itemId) {\n      loadKnowledgeItem(itemId);\n    }\n  }, [itemId, loadKnowledgeItem]);\n  \n  // Handle copy with feedback\n  const handleCopy = async (text: string, label: string) => {\n    const success = await copyToClipboard(text);\n    if (success) {\n      setCopiedText(label);\n      setTimeout(() => setCopiedText(null), 2000);\n    }\n  };\n  \n  if (!itemId) {\n    return (\n      <div className={cn('flex items-center justify-center h-64', className)}>\n        <div className=\"text-center text-muted-foreground\">\n          <DocumentTextIcon className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p>Select an item to view its details</p>\n        </div>\n      </div>\n    );\n  }\n  \n  if (loading) {\n    return (\n      <div className={cn('flex items-center justify-center h-64', className)}>\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n  \n  if (!currentKnowledgeItem) {\n    return (\n      <div className={cn('flex items-center justify-center h-64', className)}>\n        <div className=\"text-center text-muted-foreground\">\n          <XMarkIcon className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p>Item not found</p>\n        </div>\n      </div>\n    );\n  }\n  \n  const item = currentKnowledgeItem;\n  \n  // Extract engagement metrics\n  const engagement = {\n    likes: item.like_count || 0,\n    retweets: item.retweet_count || 0,\n    replies: item.reply_count || 0,\n    quotes: item.quote_count || 0\n  };\n  \n  const totalEngagement = engagement.likes + engagement.retweets + engagement.replies + engagement.quotes;\n  \n  // Check if item has media\n  const hasMedia = item.media_content && item.media_content.length > 0;\n  const hasAnalysis = item.ai_summary || item.enhanced_content || item.collective_understanding;\n  const isThread = item.thread_id && item.thread_length && item.thread_length > 1;\n  \n  // Determine available tabs\n  const availableTabs = [\n    { id: 'content', label: 'Content', icon: DocumentTextIcon },\n    ...(hasAnalysis ? [{ id: 'analysis', label: 'AI Analysis', icon: SparklesIcon }] : []),\n    ...(hasMedia ? [{ id: 'media', label: 'Media', icon: PhotoIcon }] : []),\n    ...(isThread ? [{ id: 'thread', label: 'Thread', icon: LinkIcon }] : [])\n  ];\n  \n  return (\n    <div className={cn('space-y-4', className)}>\n      {/* Header */}\n      <div className=\"flex items-start justify-between gap-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <StatusBadge status={item.processing_state as any} size=\"sm\" />\n            {item.content_type && (\n              <span className=\"text-xs px-2 py-1 bg-gray-500/20 text-gray-500 rounded-full\">\n                {item.content_type}\n              </span>\n            )}\n            {isThread && (\n              <span className=\"text-xs px-2 py-1 bg-blue-500/20 text-blue-500 rounded-full\">\n                Thread ({item.thread_length} tweets)\n              </span>\n            )}\n          </div>\n          <h1 className=\"text-xl font-bold text-foreground mb-2\">{item.title}</h1>\n          \n          {/* Metadata */}\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            {item.author_username && (\n              <div className=\"flex items-center gap-1\">\n                <UserIcon className=\"h-4 w-4\" />\n                <span>@{item.author_username}</span>\n              </div>\n            )}\n            <div className=\"flex items-center gap-1\">\n              <CalendarIcon className=\"h-4 w-4\" />\n              <span>{formatDate(item.created_at)}</span>\n            </div>\n            {item.tweet_url && (\n              <a\n                href={item.tweet_url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-1 hover:text-primary transition-colors\"\n              >\n                <ArrowTopRightOnSquareIcon className=\"h-4 w-4\" />\n                <span>View Original</span>\n              </a>\n            )}\n          </div>\n        </div>\n        \n        {onClose && (\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <XMarkIcon className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      \n      {/* Engagement Stats */}\n      {totalEngagement > 0 && (\n        <GlassCard className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-medium text-foreground\">Engagement</h3>\n            <div className=\"flex items-center gap-4 text-sm\">\n              {engagement.likes > 0 && (\n                <div className=\"flex items-center gap-1 text-red-500\">\n                  <HeartSolidIcon className=\"h-4 w-4\" />\n                  <span>{formatNumber(engagement.likes)}</span>\n                </div>\n              )}\n              {engagement.retweets > 0 && (\n                <div className=\"flex items-center gap-1 text-green-500\">\n                  <ArrowPathRoundedSquareIcon className=\"h-4 w-4\" />\n                  <span>{formatNumber(engagement.retweets)}</span>\n                </div>\n              )}\n              {engagement.replies > 0 && (\n                <div className=\"flex items-center gap-1 text-blue-500\">\n                  <ChatBubbleLeftIcon className=\"h-4 w-4\" />\n                  <span>{formatNumber(engagement.replies)}</span>\n                </div>\n              )}\n              {engagement.quotes > 0 && (\n                <div className=\"flex items-center gap-1 text-purple-500\">\n                  <ShareIcon className=\"h-4 w-4\" />\n                  <span>{formatNumber(engagement.quotes)}</span>\n                </div>\n              )}\n            </div>\n          </div>\n        </GlassCard>\n      )}\n      \n      {/* Categories */}\n      {(item.main_category || item.sub_category) && (\n        <GlassCard className=\"p-4\">\n          <div className=\"flex items-center gap-2\">\n            <TagIcon className=\"h-4 w-4 text-muted-foreground\" />\n            <span className=\"text-sm font-medium text-foreground\">Categories:</span>\n            <div className=\"flex items-center gap-2\">\n              {item.main_category && (\n                <span className=\"text-sm px-2 py-1 bg-primary/20 text-primary rounded-full\">\n                  {item.main_category}\n                </span>\n              )}\n              {item.sub_category && (\n                <span className=\"text-sm px-2 py-1 bg-gray-500/20 text-gray-500 rounded-full\">\n                  {item.sub_category}\n                </span>\n              )}\n            </div>\n          </div>\n        </GlassCard>\n      )}\n      \n      {/* Tab Navigation */}\n      <div className=\"flex items-center gap-1 border-b border-white/10\">\n        {availableTabs.map((tab) => {\n          const Icon = tab.icon;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={cn(\n                'flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-t-lg transition-all',\n                activeTab === tab.id\n                  ? 'bg-primary/20 text-primary border-b-2 border-primary'\n                  : 'text-muted-foreground hover:text-foreground hover:bg-white/5'\n              )}\n            >\n              <Icon className=\"h-4 w-4\" />\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n      \n      {/* Tab Content */}\n      <div className=\"space-y-4\">\n        {/* Content Tab */}\n        {activeTab === 'content' && (\n          <GlassCard className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-foreground\">Original Content</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleCopy(item.content, 'Content')}\n                >\n                  <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                  {copiedText === 'Content' ? 'Copied!' : 'Copy'}\n                </Button>\n              </div>\n              <div className=\"prose prose-sm max-w-none text-foreground\">\n                <p className=\"whitespace-pre-wrap\">{item.content}</p>\n              </div>\n            </div>\n          </GlassCard>\n        )}\n        \n        {/* Analysis Tab */}\n        {activeTab === 'analysis' && hasAnalysis && (\n          <div className=\"space-y-4\">\n            {item.ai_summary && (\n              <GlassCard className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                    <SparklesIcon className=\"h-5 w-5 text-primary\" />\n                    AI Summary\n                  </h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleCopy(item.ai_summary!, 'Summary')}\n                  >\n                    <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                    {copiedText === 'Summary' ? 'Copied!' : 'Copy'}\n                  </Button>\n                </div>\n                <div className=\"prose prose-sm max-w-none text-foreground\">\n                  <p className=\"whitespace-pre-wrap\">{item.ai_summary}</p>\n                </div>\n              </GlassCard>\n            )}\n            \n            {item.enhanced_content && (\n              <GlassCard className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                    <EyeIcon className=\"h-5 w-5 text-blue-500\" />\n                    Enhanced Content\n                  </h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleCopy(item.enhanced_content!, 'Enhanced Content')}\n                  >\n                    <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                    {copiedText === 'Enhanced Content' ? 'Copied!' : 'Copy'}\n                  </Button>\n                </div>\n                <div className=\"prose prose-sm max-w-none text-foreground\">\n                  <div dangerouslySetInnerHTML={{ __html: item.enhanced_content }} />\n                </div>\n              </GlassCard>\n            )}\n            \n            {item.collective_understanding && (\n              <GlassCard className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                    <SparklesIcon className=\"h-5 w-5 text-purple-500\" />\n                    Collective Understanding\n                  </h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleCopy(JSON.stringify(item.collective_understanding, null, 2), 'Understanding')}\n                  >\n                    <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                    {copiedText === 'Understanding' ? 'Copied!' : 'Copy'}\n                  </Button>\n                </div>\n                <div className=\"prose prose-sm max-w-none text-foreground\">\n                  {typeof item.collective_understanding === 'string' ? (\n                    <p className=\"whitespace-pre-wrap\">{item.collective_understanding}</p>\n                  ) : (\n                    <pre className=\"bg-gray-100 p-4 rounded-lg overflow-x-auto text-sm\">\n                      {JSON.stringify(item.collective_understanding, null, 2)}\n                    </pre>\n                  )}\n                </div>\n              </GlassCard>\n            )}\n          </div>\n        )}\n        \n        {/* Media Tab */}\n        {activeTab === 'media' && hasMedia && (\n          <div className=\"space-y-4\">\n            {item.media_content.map((media, index) => (\n              <GlassCard key={media.id || index} className=\"p-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                      {media.type === 'video' ? (\n                        <PlayIcon className=\"h-5 w-5 text-blue-500\" />\n                      ) : (\n                        <PhotoIcon className=\"h-5 w-5 text-green-500\" />\n                      )}\n                      {media.type === 'video' ? 'Video' : 'Image'} {index + 1}\n                    </h3>\n                    {media.url && (\n                      <a\n                        href={media.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center gap-1 text-sm text-primary hover:underline\"\n                      >\n                        <ArrowTopRightOnSquareIcon className=\"h-4 w-4\" />\n                        View Original\n                      </a>\n                    )}\n                  </div>\n                  \n                  {/* Media Preview */}\n                  {media.url && (\n                    <div className=\"rounded-lg overflow-hidden bg-gray-100\">\n                      {media.type === 'photo' ? (\n                        <img\n                          src={media.url}\n                          alt={media.alt_text || `Media ${index + 1}`}\n                          className=\"w-full h-auto max-h-96 object-contain\"\n                        />\n                      ) : media.type === 'video' ? (\n                        <video\n                          src={media.url}\n                          controls\n                          className=\"w-full h-auto max-h-96\"\n                          poster={media.preview_image_url}\n                        >\n                          Your browser does not support the video tag.\n                        </video>\n                      ) : (\n                        <div className=\"w-full h-48 flex items-center justify-center bg-gray-200\">\n                          <PhotoIcon className=\"h-12 w-12 text-gray-500\" />\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {/* Media Metadata */}\n                  <div className=\"space-y-2 text-sm text-muted-foreground\">\n                    {media.alt_text && (\n                      <div>\n                        <span className=\"font-medium\">Alt text:</span> {media.alt_text}\n                      </div>\n                    )}\n                    {media.width && media.height && (\n                      <div>\n                        <span className=\"font-medium\">Dimensions:</span> {media.width} × {media.height}\n                      </div>\n                    )}\n                    {media.duration_ms && (\n                      <div>\n                        <span className=\"font-medium\">Duration:</span> {(media.duration_ms / 1000).toFixed(1)}s\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </GlassCard>\n            ))}\n          </div>\n        )}\n        \n        {/* Thread Tab */}\n        {activeTab === 'thread' && isThread && (\n          <GlassCard className=\"p-6\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                <LinkIcon className=\"h-5 w-5 text-blue-500\" />\n                Thread Information\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium text-foreground\">Thread ID:</span>\n                  <span className=\"ml-2 text-muted-foreground font-mono\">{item.thread_id}</span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-foreground\">Total Tweets:</span>\n                  <span className=\"ml-2 text-muted-foreground\">{item.thread_length}</span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-foreground\">Position:</span>\n                  <span className=\"ml-2 text-muted-foreground\">\n                    {item.position_in_thread || 1} of {item.thread_length}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"font-medium text-foreground\">Is Root:</span>\n                  <span className=\"ml-2 text-muted-foreground\">\n                    {item.is_thread_root ? 'Yes' : 'No'}\n                  </span>\n                </div>\n              </div>\n              \n              {item.thread_id && (\n                <div className=\"pt-4 border-t border-white/10\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <LinkIcon className=\"h-4 w-4 mr-2\" />\n                    View Full Thread\n                  </Button>\n                </div>\n              )}\n            </div>\n          </GlassCard>\n        )}\n      </div>\n    </div>\n  );\n};"