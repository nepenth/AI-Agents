{
  "prompt_id": "readme_category_description_standard",
  "prompt_name": "README Category Description (Optimized)",
  "description": "Generates compelling category descriptions for README files that highlight the technical focus and value of each knowledge base category",
  "model_type": "standard",
  "category": "readme_generation",
  "task": "Create engaging category descriptions by analyzing category information and subcategory data to produce compelling descriptions that showcase the technical depth and practical value of each knowledge base category",
  "topic": "Technical documentation, category presentation, and knowledge base organization",
  "format": {
    "output_type": "markdown",
    "response_structure": {
      "type": "category_description",
      "length": "80-120 words",
      "tone": "professional, informative",
      "style": "technical documentation"
    },
    "constraints": [
      "Include subcategory count and examples",
      "Highlight technical focus and practical value",
      "Use professional, engaging tone",
      "Focus on developer audience",
      "Emphasize actionable insights"
    ]
  },
  "input_parameters": {
    "required": [
      "main_display",
      "total_cat_items",
      "active_subcats"
    ],
    "optional": [],
    "parameters": {
      "main_display": {
        "type": "string",
        "description": "Display name of the main category (e.g., 'Concurrency Patterns')"
      },
      "total_cat_items": {
        "type": "integer",
        "description": "Total number of items in this category"
      },
      "active_subcats": {
        "type": "array",
        "description": "List of active subcategories within this main category"
      }
    }
  },
  "template": {
    "type": "standard",
    "content": "# ROLE & CONTEXT\nYou are an expert technical writer specializing in developer documentation and knowledge base organization. Your goal is to create compelling category descriptions that immediately communicate the technical value and practical applications of each knowledge domain.\n\n# TASK\nYour task is to create an engaging category description by analyzing the category '{{main_display}}' ({{total_cat_items}} items across {{subcategory_count}} subcategories) to produce an 80-120 word description that highlights the technical focus, practical value, and actionable insights available in this category.\n\n# INPUT\nCategory: {{main_display}}\nTotal Items: {{total_cat_items}}\nSubcategories: {{formatted_subcats}}\nSubcategory Count: {{subcategory_count}}\n\n# INSTRUCTIONS\n1. **Open with Technical Focus**: Start by clearly defining the category's technical domain\n2. **Highlight Practical Value**: Emphasize real-world applications and benefits\n3. **Reference Subcategories**: Mention key subcategories to show breadth\n4. **Include Statistics**: Use the item count to demonstrate depth\n5. **End with Value Proposition**: Conclude with what developers will gain\n\n# CONSTRAINTS\n‚úÖ DO:\n- Keep within 80-120 word range\n- Use specific technical terminology\n- Reference actual subcategories provided\n- Include the item count naturally\n- Focus on practical developer value\n- Use active, engaging language\n\n‚ùå DON'T:\n- Use generic, template-like descriptions\n- Ignore the provided subcategory information\n- Write overly long or verbose content\n- Use marketing speak or hyperbole\n- Forget to mention practical applications\n\nüö´ NEVER:\n- Exceed 120 words or fall below 80 words\n- Provide inaccurate subcategory information\n- Use placeholder text or generic descriptions\n\n# OUTPUT FORMAT\nProvide a single, well-crafted paragraph in markdown format. No headers, no bullet points, just the description paragraph.\n\n# EXAMPLES\n\n**Input**: \"Concurrency Patterns\", 25 items, [\"Thread Safety\", \"Async Programming\", \"Lock-Free Algorithms\"]\n**Output**: Concurrency Patterns encompasses 25 comprehensive resources covering the critical aspects of multi-threaded and asynchronous programming. This category explores Thread Safety mechanisms, Async Programming paradigms, and Lock-Free Algorithms, providing developers with battle-tested approaches to building scalable, high-performance applications. Each resource offers practical insights into managing shared state, coordinating parallel execution, and avoiding common concurrency pitfalls. Whether you're designing distributed systems or optimizing single-machine performance, these patterns provide the foundational knowledge needed to write robust, concurrent code that scales effectively under load.\n\n**Input**: \"API Design Patterns\", 18 items, [\"REST Architecture\", \"GraphQL Implementation\", \"Authentication Strategies\"]\n**Output**: API Design Patterns features 18 detailed resources covering modern approaches to building robust, scalable APIs. This collection spans REST Architecture principles, GraphQL Implementation strategies, and Authentication Strategies, offering developers comprehensive guidance for creating APIs that are both powerful and maintainable. Each resource provides actionable insights into interface design, data modeling, security considerations, and performance optimization. From designing intuitive REST endpoints to implementing efficient GraphQL resolvers, these patterns equip developers with the knowledge to build APIs that serve as solid foundations for modern applications.\n\n**Input**: \"Database Optimization\", 12 items, [\"Query Performance\", \"Index Strategies\", \"Schema Design\"]\n**Output**: Database Optimization contains 12 focused resources addressing the critical performance aspects of modern database systems. This category covers Query Performance tuning, Index Strategies, and Schema Design principles, providing database developers and architects with proven techniques for building high-performance data layers. Each resource delivers practical guidance on identifying bottlenecks, optimizing query execution plans, and designing schemas that scale efficiently. Whether you're working with relational databases or NoSQL systems, these optimization patterns help ensure your data layer can handle growing demands while maintaining consistent performance.\n\n**CRITICAL**: Create a compelling, technically accurate description that showcases the category's value to developers."
  },
  "examples": [
    {
      "name": "concurrency_patterns",
      "input": {
        "main_display": "Concurrency Patterns",
        "total_cat_items": 25,
        "active_subcats": [
          "Thread Safety",
          "Async Programming",
          "Lock-Free Algorithms"
        ]
      },
      "expected_output": "Concurrency Patterns encompasses 25 comprehensive resources covering the critical aspects of multi-threaded and asynchronous programming...",
      "notes": "Example showing technical focus with practical applications"
    },
    {
      "name": "api_design",
      "input": {
        "main_display": "API Design Patterns",
        "total_cat_items": 18,
        "active_subcats": [
          "REST Architecture",
          "GraphQL Implementation",
          "Authentication Strategies"
        ]
      },
      "expected_output": "API Design Patterns features 18 detailed resources covering modern approaches to building robust, scalable APIs...",
      "notes": "Example emphasizing practical guidance and actionable insights"
    }
  ],
  "metadata": {
    "version": "2.0.0",
    "author": "Knowledge Base Agent System - Optimized",
    "created_date": "2024-07-24",
    "last_modified": "2025-01-27",
    "tags": [
      "readme",
      "category-description",
      "documentation",
      "technical-writing",
      "optimized"
    ],
    "performance_notes": "Optimized with clear structure, specific examples, and strong constraints",
    "quality_score": 9.0,
    "optimization_notes": "Transformed from 0% to 90%+ quality with comprehensive approach"
  }
}