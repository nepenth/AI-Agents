{
  "metadata": {
    "generated_at": "2024-01-01T00:00:00Z",
    "version": "1.0.0",
    "base_url": "http://localhost:5000"
  },
  "statistics": {
    "total_endpoints": 66,
    "by_category": {
      "Web UI": 2,
      "Agent Management (V2)": 3,
      "Celery Management (V2)": 4,
      "Agent Management": 2,
      "API": 12,
      "Chat & AI": 9,
      "Configuration": 2,
      "Knowledge Base": 2,
      "Logging": 6,
      "Environment": 4,
      "System Utilities": 10,
      "Hardware Monitoring": 2,
      "Scheduling": 6,
      "Web UI (V2)": 2
    },
    "by_version": {
      "v1": 53,
      "v2": 11,
      "web": 2
    },
    "by_method": {
      "DELETE": 4,
      "POST": 26,
      "PUT": 1,
      "GET": 37
    }
  },
  "categories": {
    "Web UI": [
      {
        "path": "/static/<path:filename>",
        "methods": [
          "GET"
        ],
        "function_name": "<lambda>",
        "module": "flask.app",
        "category": "Web UI",
        "summary": "No description available",
        "description": "",
        "path_parameters": [
          {
            "name": "filename",
            "type": "string",
            "required": true,
            "description": "Name of the file",
            "example": "path/to/resource",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "web",
        "tags": [
          "Web UI"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/static/path/to/file\""
        ],
        "javascript_examples": [
          "// GET /static/<path:filename>\nconst response = await fetch('http://localhost:5000/static/path/to/file', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /static/<path:filename>\nimport requests\n\nurl = 'http://localhost:5000/static/path/to/file'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/",
        "methods": [
          "GET"
        ],
        "function_name": "index",
        "module": "knowledge_base_agent.web",
        "category": "Web UI",
        "summary": "No description available",
        "description": "",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "web",
        "tags": [
          "Web UI"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/\""
        ],
        "javascript_examples": [
          "// GET /\nconst response = await fetch('http://localhost:5000/', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /\nimport requests\n\nurl = 'http://localhost:5000/'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/static/<path:filename>"
        ],
        "workflow_context": null,
        "error_scenarios": []
      }
    ],
    "Agent Management (V2)": [
      {
        "path": "/api/v2/agent/start",
        "methods": [
          "POST"
        ],
        "function_name": "start_agent_v2",
        "module": "knowledge_base_agent.api.routes",
        "category": "Agent Management (V2)",
        "summary": "Sync wrapper that queues an agent run. Executes async logic via asyncio.run.",
        "description": "Sync wrapper that queues an agent run. Executes async logic via asyncio.run.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "preferences": {
              "type": "object",
              "properties": {
                "run_mode": {
                  "type": "string",
                  "enum": [
                    "full",
                    "test",
                    "minimal"
                  ]
                },
                "skip_fetch_bookmarks": {
                  "type": "boolean"
                },
                "skip_process_content": {
                  "type": "boolean"
                },
                "force_recache_tweets": {
                  "type": "boolean"
                }
              }
            }
          },
          "required": [
            "preferences"
          ]
        },
        "responses": [
          {
            "status_code": 201,
            "description": "Created successfully",
            "schema": null,
            "example": {
              "success": true,
              "id": 1
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Agent Management (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/v2/agent/start\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"preferences\": {\"run_mode\": \"full\", \"skip_fetch_bookmarks\": true, \"skip_process_content\": true, \"force_recache_tweets\": true}}'"
        ],
        "javascript_examples": [
          "// POST /api/v2/agent/start\nconst response = await fetch('http://localhost:5000/api/v2/agent/start', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"preferences\": {\n    \"run_mode\": \"full\",\n    \"skip_fetch_bookmarks\": true,\n    \"skip_process_content\": true,\n    \"force_recache_tweets\": true\n  }\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/v2/agent/start\nimport requests\n\nurl = 'http://localhost:5000/api/v2/agent/start'\ndata = {\n  \"preferences\": {\n    \"run_mode\": \"full\",\n    \"skip_fetch_bookmarks\": true,\n    \"skip_process_content\": true,\n    \"force_recache_tweets\": true\n  }\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/v2/agent/status/<task_id>",
          "/api/v2/agent/stop"
        ],
        "workflow_context": "Part of the agent execution workflow. Use this to start the Knowledge Base Agent with specific preferences.",
        "error_scenarios": [
          "Agent already running - returns 400",
          "Invalid preferences format - returns 400",
          "System resources unavailable - returns 503",
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/v2/agent/status/<task_id>",
        "methods": [
          "GET"
        ],
        "function_name": "get_task_status",
        "module": "knowledge_base_agent.api.routes",
        "category": "Agent Management (V2)",
        "summary": "Sync wrapper around async status-gathering logic.",
        "description": "Sync wrapper around async status-gathering logic.",
        "path_parameters": [
          {
            "name": "task_id",
            "type": "string",
            "required": true,
            "description": "Task identifier for tracking",
            "example": "abc123",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Agent Management (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/v2/agent/status/example\""
        ],
        "javascript_examples": [
          "// GET /api/v2/agent/status/<task_id>\nconst response = await fetch('http://localhost:5000/api/v2/agent/status/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/v2/agent/status/<task_id>\nimport requests\n\nurl = 'http://localhost:5000/api/v2/agent/status/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/v2/agent/start",
          "/api/v2/agent/stop"
        ],
        "workflow_context": "Monitor agent execution progress. Poll this endpoint to track task completion.",
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/v2/agent/stop",
        "methods": [
          "POST"
        ],
        "function_name": "stop_agent_v2",
        "module": "knowledge_base_agent.api.routes",
        "category": "Agent Management (V2)",
        "summary": "Stops a running agent task via Celery.",
        "description": "Stops a running agent task via Celery.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Agent Management (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/v2/agent/stop\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/v2/agent/stop\nconst response = await fetch('http://localhost:5000/api/v2/agent/stop', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/v2/agent/stop\nimport requests\n\nurl = 'http://localhost:5000/api/v2/agent/stop'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/v2/agent/start",
          "/api/v2/agent/status/<task_id>"
        ],
        "workflow_context": "Stop running agent tasks. Use when you need to cancel ongoing operations.",
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      }
    ],
    "Celery Management (V2)": [
      {
        "path": "/api/v2/celery/clear-queue",
        "methods": [
          "POST"
        ],
        "function_name": "clear_celery_queue_v2",
        "module": "knowledge_base_agent.api.routes",
        "category": "Celery Management (V2)",
        "summary": "Clear all tasks from Celery queue.",
        "description": "Clear all tasks from Celery queue.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Celery Management (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/v2/celery/clear-queue\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/v2/celery/clear-queue\nconst response = await fetch('http://localhost:5000/api/v2/celery/clear-queue', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/v2/celery/clear-queue\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/clear-queue'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/v2/celery/purge-tasks",
          "/api/v2/celery/restart-workers",
          "/api/v2/celery/status"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/v2/celery/purge-tasks",
        "methods": [
          "POST"
        ],
        "function_name": "purge_celery_tasks_v2",
        "module": "knowledge_base_agent.api.routes",
        "category": "Celery Management (V2)",
        "summary": "Purge all Celery tasks (active and queued).",
        "description": "Purge all Celery tasks (active and queued).",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Celery Management (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/v2/celery/purge-tasks\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/v2/celery/purge-tasks\nconst response = await fetch('http://localhost:5000/api/v2/celery/purge-tasks', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/v2/celery/purge-tasks\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/purge-tasks'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/v2/celery/clear-queue",
          "/api/v2/celery/restart-workers",
          "/api/v2/celery/status"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/v2/celery/restart-workers",
        "methods": [
          "POST"
        ],
        "function_name": "restart_celery_workers_v2",
        "module": "knowledge_base_agent.api.routes",
        "category": "Celery Management (V2)",
        "summary": "Restart Celery workers.",
        "description": "Restart Celery workers.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 201,
            "description": "Created successfully",
            "schema": null,
            "example": {
              "success": true,
              "id": 1
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Celery Management (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/v2/celery/restart-workers\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/v2/celery/restart-workers\nconst response = await fetch('http://localhost:5000/api/v2/celery/restart-workers', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/v2/celery/restart-workers\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/restart-workers'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/v2/celery/clear-queue",
          "/api/v2/celery/purge-tasks",
          "/api/v2/celery/status"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Agent already running - returns 400",
          "Invalid preferences format - returns 400",
          "System resources unavailable - returns 503",
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/v2/celery/status",
        "methods": [
          "GET"
        ],
        "function_name": "celery_worker_status_v2",
        "module": "knowledge_base_agent.api.routes",
        "category": "Celery Management (V2)",
        "summary": "Get Celery worker status.",
        "description": "Get Celery worker status.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Celery Management (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/v2/celery/status\""
        ],
        "javascript_examples": [
          "// GET /api/v2/celery/status\nconst response = await fetch('http://localhost:5000/api/v2/celery/status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/v2/celery/status\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/v2/celery/clear-queue",
          "/api/v2/celery/purge-tasks",
          "/api/v2/celery/restart-workers"
        ],
        "workflow_context": null,
        "error_scenarios": []
      }
    ],
    "Agent Management": [
      {
        "path": "/api/agent/status",
        "methods": [
          "GET"
        ],
        "function_name": "get_agent_status",
        "module": "knowledge_base_agent.api.routes",
        "category": "Agent Management",
        "summary": "Synchronous wrapper around get_task_status to avoid AsyncToSync errors",
        "description": "when running Flask on gevent.  Executes the coroutine in its own event\nloop with ``asyncio.run``.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Agent Management"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/agent/status\""
        ],
        "javascript_examples": [
          "// GET /api/agent/status\nconst response = await fetch('http://localhost:5000/api/agent/status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/agent/status\nimport requests\n\nurl = 'http://localhost:5000/api/agent/status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/agent/status_legacy",
          "/api/agent/reset"
        ],
        "workflow_context": "Monitor agent execution progress. Poll this endpoint to track task completion.",
        "error_scenarios": []
      },
      {
        "path": "/api/agent/reset",
        "methods": [
          "POST"
        ],
        "function_name": "reset_agent_state",
        "module": "knowledge_base_agent.api.routes",
        "category": "Agent Management",
        "summary": "Resets the agent's database state to idle.",
        "description": "Resets the agent's database state to idle.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Agent Management"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/agent/reset\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/agent/reset\nconst response = await fetch('http://localhost:5000/api/agent/reset', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/agent/reset\nimport requests\n\nurl = 'http://localhost:5000/api/agent/reset'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/agent/status",
          "/api/agent/status_legacy"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      }
    ],
    "API": [
      {
        "path": "/api/media/<path:path>",
        "methods": [
          "GET"
        ],
        "function_name": "serve_kb_media_generic",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "Serve media files from the knowledge base directory.",
        "description": "Serve media files from the knowledge base directory.",
        "path_parameters": [
          {
            "name": "path",
            "type": "string",
            "required": true,
            "description": "Path parameter",
            "example": "path/to/resource",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/media/path/to/file\""
        ],
        "javascript_examples": [
          "// GET /api/media/<path:path>\nconst response = await fetch('http://localhost:5000/api/media/path/to/file', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/media/<path:path>\nimport requests\n\nurl = 'http://localhost:5000/api/media/path/to/file'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses",
          "/api/schedule-history"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/schedule",
        "methods": [
          "POST",
          "GET"
        ],
        "function_name": "schedule_endpoint",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "V1 LEGACY ENDPOINT: Simulates schedule handling for backward compatibility.",
        "description": "V1 LEGACY ENDPOINT: Simulates schedule handling for backward compatibility.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/schedule\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'",
          "curl -X GET \\\n  \"http://localhost:5000/api/schedule\""
        ],
        "javascript_examples": [
          "// POST /api/schedule\nconst response = await fetch('http://localhost:5000/api/schedule', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);",
          "// GET /api/schedule\nconst response = await fetch('http://localhost:5000/api/schedule', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/schedule'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
          "# GET /api/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/schedule'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses",
          "/api/schedule-history"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/hardware-detection",
        "methods": [
          "GET"
        ],
        "function_name": "get_hardware_detection",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "Get detected hardware information.",
        "description": "Get detected hardware information.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/hardware-detection\""
        ],
        "javascript_examples": [
          "// GET /api/hardware-detection\nconst response = await fetch('http://localhost:5000/api/hardware-detection', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/hardware-detection\nimport requests\n\nurl = 'http://localhost:5000/api/hardware-detection'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/ollama-optimization",
          "/api/syntheses",
          "/api/schedule-history"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/ollama-optimization",
        "methods": [
          "POST"
        ],
        "function_name": "generate_ollama_optimization",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "Generate Ollama optimization settings based on hardware and profile.",
        "description": "Generate Ollama optimization settings based on hardware and profile.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/ollama-optimization\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/ollama-optimization\nconst response = await fetch('http://localhost:5000/api/ollama-optimization', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/ollama-optimization\nimport requests\n\nurl = 'http://localhost:5000/api/ollama-optimization'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/syntheses",
          "/api/schedule-history"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/syntheses",
        "methods": [
          "GET"
        ],
        "function_name": "api_synthesis_list",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "API endpoint to get all synthesis documents.",
        "description": "API endpoint to get all synthesis documents.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/syntheses\""
        ],
        "javascript_examples": [
          "// GET /api/syntheses\nconst response = await fetch('http://localhost:5000/api/syntheses', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/syntheses\nimport requests\n\nurl = 'http://localhost:5000/api/syntheses'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/schedule-history"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/schedule-history",
        "methods": [
          "GET"
        ],
        "function_name": "api_get_schedule_history",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "Get schedule execution history.",
        "description": "Get schedule execution history.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/schedule-history\""
        ],
        "javascript_examples": [
          "// GET /api/schedule-history\nconst response = await fetch('http://localhost:5000/api/schedule-history', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/schedule-history\nimport requests\n\nurl = 'http://localhost:5000/api/schedule-history'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/schedule-runs/<int:run_id>",
        "methods": [
          "DELETE"
        ],
        "function_name": "delete_schedule_run",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "API endpoint to delete a schedule run from history.",
        "description": "API endpoint to delete a schedule run from history.",
        "path_parameters": [
          {
            "name": "run_id",
            "type": "integer",
            "required": true,
            "description": "Schedule run identifier",
            "example": 1,
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Deleted successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Deleted"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X DELETE \\\n  \"http://localhost:5000/api/schedule-runs/1\""
        ],
        "javascript_examples": [
          "// DELETE /api/schedule-runs/<int:run_id>\nconst response = await fetch('http://localhost:5000/api/schedule-runs/1', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# DELETE /api/schedule-runs/<int:run_id>\nimport requests\n\nurl = 'http://localhost:5000/api/schedule-runs/1'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/kb/all",
        "methods": [
          "GET"
        ],
        "function_name": "get_kb_all",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "Returns a JSON object with all KB items and syntheses for the TOC.",
        "description": "Returns a JSON object with all KB items and syntheses for the TOC.",
        "path_parameters": [],
        "query_parameters": [
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of results",
            "example": 10,
            "validation": null
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of results to skip",
            "example": 0,
            "validation": null
          }
        ],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/kb/all\""
        ],
        "javascript_examples": [
          "// GET /api/kb/all\nconst response = await fetch('http://localhost:5000/api/kb/all', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/kb/all\nimport requests\n\nurl = 'http://localhost:5000/api/kb/all'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/v2/schedule",
        "methods": [
          "POST",
          "GET"
        ],
        "function_name": "schedule_v2_endpoint",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "V2 ENDPOINT: Handles getting and setting the agent execution schedule from the database.",
        "description": "V2 ENDPOINT: Handles getting and setting the agent execution schedule from the database.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "API",
          "v2"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/v2/schedule\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'",
          "curl -X GET \\\n  \"http://localhost:5000/api/v2/schedule\""
        ],
        "javascript_examples": [
          "// POST /api/v2/schedule\nconst response = await fetch('http://localhost:5000/api/v2/schedule', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);",
          "// GET /api/v2/schedule\nconst response = await fetch('http://localhost:5000/api/v2/schedule', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/v2/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/v2/schedule'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
          "# GET /api/v2/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/v2/schedule'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/items/<int:item_id>",
        "methods": [
          "GET"
        ],
        "function_name": "get_kb_item",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "API endpoint for getting KB item data in JSON format.",
        "description": "API endpoint for getting KB item data in JSON format.",
        "path_parameters": [
          {
            "name": "item_id",
            "type": "integer",
            "required": true,
            "description": "Knowledge base item identifier",
            "example": 1,
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/items/1\""
        ],
        "javascript_examples": [
          "// GET /api/items/<int:item_id>\nconst response = await fetch('http://localhost:5000/api/items/1', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/items/<int:item_id>\nimport requests\n\nurl = 'http://localhost:5000/api/items/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/system/info",
        "methods": [
          "GET"
        ],
        "function_name": "get_system_info",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "Get comprehensive system information.",
        "description": "Get comprehensive system information.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "API"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/system/info\""
        ],
        "javascript_examples": [
          "// GET /api/system/info\nconst response = await fetch('http://localhost:5000/api/system/info', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/system/info\nimport requests\n\nurl = 'http://localhost:5000/api/system/info'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/v2/logs/clear",
        "methods": [
          "POST"
        ],
        "function_name": "clear_logs_v2",
        "module": "knowledge_base_agent.api.routes",
        "category": "API",
        "summary": "V2 API: Clear all server-side logs.",
        "description": "V2 API: Clear all server-side logs.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "API",
          "v2"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/v2/logs/clear\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/v2/logs/clear\nconst response = await fetch('http://localhost:5000/api/v2/logs/clear', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/v2/logs/clear\nimport requests\n\nurl = 'http://localhost:5000/api/v2/logs/clear'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/media/<path:path>",
          "/api/schedule",
          "/api/hardware-detection",
          "/api/ollama-optimization",
          "/api/syntheses"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      }
    ],
    "Chat & AI": [
      {
        "path": "/api/chat/models",
        "methods": [
          "GET"
        ],
        "function_name": "get_chat_models",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Returns the list of available chat models from the config.",
        "description": "Returns the list of available chat models from the config.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/chat/models\""
        ],
        "javascript_examples": [
          "// GET /api/chat/models\nconst response = await fetch('http://localhost:5000/api/chat/models', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/chat/models\nimport requests\n\nurl = 'http://localhost:5000/api/chat/models'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/models/available",
          "/api/chat/sessions"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": []
      },
      {
        "path": "/api/chat",
        "methods": [
          "POST"
        ],
        "function_name": "chat",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Handle chat interactions via API using the knowledge base agent.",
        "description": "Handle chat interactions via API using the knowledge base agent.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "session_id": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/chat\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
        ],
        "javascript_examples": [
          "// POST /api/chat\nconst response = await fetch('http://localhost:5000/api/chat', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/chat\nimport requests\n\nurl = 'http://localhost:5000/api/chat'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/models/available",
          "/api/chat/sessions"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/chat/enhanced",
        "methods": [
          "POST"
        ],
        "function_name": "api_chat_enhanced",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Enhanced chat API endpoint with technical expertise and rich source metadata.",
        "description": "Enhanced chat API endpoint with technical expertise and rich source metadata.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "session_id": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/chat/enhanced\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
        ],
        "javascript_examples": [
          "// POST /api/chat/enhanced\nconst response = await fetch('http://localhost:5000/api/chat/enhanced', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/chat/enhanced\nimport requests\n\nurl = 'http://localhost:5000/api/chat/enhanced'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/models/available",
          "/api/chat/sessions"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/chat/models/available",
        "methods": [
          "GET"
        ],
        "function_name": "api_chat_models_available",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Get available chat models.",
        "description": "Get available chat models.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/chat/models/available\""
        ],
        "javascript_examples": [
          "// GET /api/chat/models/available\nconst response = await fetch('http://localhost:5000/api/chat/models/available', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/chat/models/available\nimport requests\n\nurl = 'http://localhost:5000/api/chat/models/available'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/sessions"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": []
      },
      {
        "path": "/api/chat/sessions",
        "methods": [
          "GET"
        ],
        "function_name": "api_get_chat_sessions",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Get all chat sessions.",
        "description": "Get all chat sessions.",
        "path_parameters": [],
        "query_parameters": [
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of results",
            "example": 10,
            "validation": null
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of results to skip",
            "example": 0,
            "validation": null
          }
        ],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/chat/sessions\""
        ],
        "javascript_examples": [
          "// GET /api/chat/sessions\nconst response = await fetch('http://localhost:5000/api/chat/sessions', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/chat/sessions\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/models/available"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": []
      },
      {
        "path": "/api/chat/sessions/<session_id>",
        "methods": [
          "GET"
        ],
        "function_name": "api_get_chat_session",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Get a specific chat session with messages.",
        "description": "Get a specific chat session with messages.",
        "path_parameters": [
          {
            "name": "session_id",
            "type": "string",
            "required": true,
            "description": "Chat session identifier",
            "example": "abc123",
            "validation": null
          }
        ],
        "query_parameters": [
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of results",
            "example": 10,
            "validation": null
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of results to skip",
            "example": 0,
            "validation": null
          }
        ],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/chat/sessions/example\""
        ],
        "javascript_examples": [
          "// GET /api/chat/sessions/<session_id>\nconst response = await fetch('http://localhost:5000/api/chat/sessions/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/chat/sessions/<session_id>\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/models/available"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/chat/sessions",
        "methods": [
          "POST"
        ],
        "function_name": "api_create_chat_session",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Create a new chat session.",
        "description": "Create a new chat session.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "session_id": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/chat/sessions\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
        ],
        "javascript_examples": [
          "// POST /api/chat/sessions\nconst response = await fetch('http://localhost:5000/api/chat/sessions', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/chat/sessions\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/models/available"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/chat/sessions/<session_id>/archive",
        "methods": [
          "POST"
        ],
        "function_name": "api_archive_chat_session",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Archive/unarchive a chat session.",
        "description": "Archive/unarchive a chat session.",
        "path_parameters": [
          {
            "name": "session_id",
            "type": "string",
            "required": true,
            "description": "Chat session identifier",
            "example": "abc123",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "model": {
              "type": "string"
            },
            "session_id": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/chat/sessions/example/archive\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
        ],
        "javascript_examples": [
          "// POST /api/chat/sessions/<session_id>/archive\nconst response = await fetch('http://localhost:5000/api/chat/sessions/example/archive', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/chat/sessions/<session_id>/archive\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions/example/archive'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/models/available"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": [
          "Invalid ID format - returns 404",
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/chat/sessions/<session_id>",
        "methods": [
          "DELETE"
        ],
        "function_name": "api_delete_chat_session",
        "module": "knowledge_base_agent.api.routes",
        "category": "Chat & AI",
        "summary": "Delete a chat session and all its messages.",
        "description": "Delete a chat session and all its messages.",
        "path_parameters": [
          {
            "name": "session_id",
            "type": "string",
            "required": true,
            "description": "Chat session identifier",
            "example": "abc123",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Deleted successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Deleted"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Chat & AI"
        ],
        "curl_examples": [
          "curl -X DELETE \\\n  \"http://localhost:5000/api/chat/sessions/example\""
        ],
        "javascript_examples": [
          "// DELETE /api/chat/sessions/<session_id>\nconst response = await fetch('http://localhost:5000/api/chat/sessions/example', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# DELETE /api/chat/sessions/<session_id>\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions/example'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/chat/models",
          "/api/chat",
          "/api/chat/legacy",
          "/api/chat/enhanced",
          "/api/chat/models/available"
        ],
        "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      }
    ],
    "Configuration": [
      {
        "path": "/api/preferences",
        "methods": [
          "GET"
        ],
        "function_name": "get_preferences",
        "module": "knowledge_base_agent.api.routes",
        "category": "Configuration",
        "summary": "Get current user preferences.",
        "description": "Get current user preferences.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Configuration"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/preferences\""
        ],
        "javascript_examples": [
          "// GET /api/preferences\nconst response = await fetch('http://localhost:5000/api/preferences', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/preferences\nimport requests\n\nurl = 'http://localhost:5000/api/preferences'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [],
        "workflow_context": "Configure agent behavior. Set processing preferences before starting agent tasks.",
        "error_scenarios": []
      },
      {
        "path": "/api/preferences",
        "methods": [
          "POST"
        ],
        "function_name": "save_preferences",
        "module": "knowledge_base_agent.api.routes",
        "category": "Configuration",
        "summary": "Save user preferences.",
        "description": "Save user preferences.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "run_mode": {
              "type": "string"
            },
            "skip_fetch_bookmarks": {
              "type": "boolean"
            },
            "skip_process_content": {
              "type": "boolean"
            }
          }
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Configuration"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/preferences\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"run_mode\": \"example_run_mode\", \"skip_fetch_bookmarks\": true, \"skip_process_content\": true}'"
        ],
        "javascript_examples": [
          "// POST /api/preferences\nconst response = await fetch('http://localhost:5000/api/preferences', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"run_mode\": \"example_run_mode\",\n  \"skip_fetch_bookmarks\": true,\n  \"skip_process_content\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/preferences\nimport requests\n\nurl = 'http://localhost:5000/api/preferences'\ndata = {\n  \"run_mode\": \"example_run_mode\",\n  \"skip_fetch_bookmarks\": true,\n  \"skip_process_content\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [],
        "workflow_context": "Configure agent behavior. Set processing preferences before starting agent tasks.",
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      }
    ],
    "Knowledge Base": [
      {
        "path": "/api/synthesis",
        "methods": [
          "GET"
        ],
        "function_name": "get_synthesis_documents",
        "module": "knowledge_base_agent.api.routes",
        "category": "Knowledge Base",
        "summary": "API endpoint to get all synthesis documents.",
        "description": "API endpoint to get all synthesis documents.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Knowledge Base"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/synthesis\""
        ],
        "javascript_examples": [
          "// GET /api/synthesis\nconst response = await fetch('http://localhost:5000/api/synthesis', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/synthesis\nimport requests\n\nurl = 'http://localhost:5000/api/synthesis'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/synthesis/<int:synthesis_id>"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/synthesis/<int:synthesis_id>",
        "methods": [
          "GET"
        ],
        "function_name": "get_synthesis_item",
        "module": "knowledge_base_agent.api.routes",
        "category": "Knowledge Base",
        "summary": "API endpoint for getting synthesis data in JSON format.",
        "description": "API endpoint for getting synthesis data in JSON format.",
        "path_parameters": [
          {
            "name": "synthesis_id",
            "type": "integer",
            "required": true,
            "description": "Synthesis document identifier",
            "example": 1,
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Knowledge Base"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/synthesis/1\""
        ],
        "javascript_examples": [
          "// GET /api/synthesis/<int:synthesis_id>\nconst response = await fetch('http://localhost:5000/api/synthesis/1', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/synthesis/<int:synthesis_id>\nimport requests\n\nurl = 'http://localhost:5000/api/synthesis/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/synthesis"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      }
    ],
    "Logging": [
      {
        "path": "/api/logs",
        "methods": [
          "GET"
        ],
        "function_name": "api_list_logs",
        "module": "knowledge_base_agent.api.routes",
        "category": "Logging",
        "summary": "API endpoint to list available log files.",
        "description": "API endpoint to list available log files.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Logging"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/logs\""
        ],
        "javascript_examples": [
          "// GET /api/logs\nconst response = await fetch('http://localhost:5000/api/logs', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/logs\nimport requests\n\nurl = 'http://localhost:5000/api/logs'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/logs/<filename>",
          "/api/logs/delete-all",
          "/api/logs/files",
          "/api/logs/recent",
          "/api/logs/clear"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/logs/<filename>",
        "methods": [
          "GET"
        ],
        "function_name": "api_get_log_content",
        "module": "knowledge_base_agent.api.routes",
        "category": "Logging",
        "summary": "API endpoint to get the content of a specific log file.",
        "description": "API endpoint to get the content of a specific log file.",
        "path_parameters": [
          {
            "name": "filename",
            "type": "string",
            "required": true,
            "description": "Name of the file",
            "example": "example_name",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Logging"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/logs/example\""
        ],
        "javascript_examples": [
          "// GET /api/logs/<filename>\nconst response = await fetch('http://localhost:5000/api/logs/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/logs/<filename>\nimport requests\n\nurl = 'http://localhost:5000/api/logs/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/logs",
          "/api/logs/delete-all",
          "/api/logs/files",
          "/api/logs/recent",
          "/api/logs/clear"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/logs/delete-all",
        "methods": [
          "POST"
        ],
        "function_name": "api_delete_all_logs",
        "module": "knowledge_base_agent.api.routes",
        "category": "Logging",
        "summary": "API endpoint to delete all log files.",
        "description": "API endpoint to delete all log files.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Logging"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/logs/delete-all\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/logs/delete-all\nconst response = await fetch('http://localhost:5000/api/logs/delete-all', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/logs/delete-all\nimport requests\n\nurl = 'http://localhost:5000/api/logs/delete-all'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/logs",
          "/api/logs/<filename>",
          "/api/logs/files",
          "/api/logs/recent",
          "/api/logs/clear"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/logs/files",
        "methods": [
          "GET"
        ],
        "function_name": "get_log_files",
        "module": "knowledge_base_agent.api.routes",
        "category": "Logging",
        "summary": "API endpoint to get a list of log files.",
        "description": "API endpoint to get a list of log files.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Logging"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/logs/files\""
        ],
        "javascript_examples": [
          "// GET /api/logs/files\nconst response = await fetch('http://localhost:5000/api/logs/files', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/logs/files\nimport requests\n\nurl = 'http://localhost:5000/api/logs/files'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/logs",
          "/api/logs/<filename>",
          "/api/logs/delete-all",
          "/api/logs/recent",
          "/api/logs/clear"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/logs/recent",
        "methods": [
          "GET"
        ],
        "function_name": "get_recent_logs",
        "module": "knowledge_base_agent.api.routes",
        "category": "Logging",
        "summary": "Get recent log messages from Redis via TaskProgressManager.",
        "description": "Get recent log messages from Redis via TaskProgressManager.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Logging"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/logs/recent\""
        ],
        "javascript_examples": [
          "// GET /api/logs/recent\nconst response = await fetch('http://localhost:5000/api/logs/recent', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/logs/recent\nimport requests\n\nurl = 'http://localhost:5000/api/logs/recent'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/logs",
          "/api/logs/<filename>",
          "/api/logs/delete-all",
          "/api/logs/files",
          "/api/logs/clear"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/logs/clear",
        "methods": [
          "POST"
        ],
        "function_name": "clear_recent_logs",
        "module": "knowledge_base_agent.api.routes",
        "category": "Logging",
        "summary": "REST API: Clear the in-memory log buffer.",
        "description": "REST API: Clear the in-memory log buffer.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Logging"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/logs/clear\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/logs/clear\nconst response = await fetch('http://localhost:5000/api/logs/clear', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/logs/clear\nimport requests\n\nurl = 'http://localhost:5000/api/logs/clear'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/logs",
          "/api/logs/<filename>",
          "/api/logs/delete-all",
          "/api/logs/files",
          "/api/logs/recent"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      }
    ],
    "Environment": [
      {
        "path": "/api/environment-variables",
        "methods": [
          "GET"
        ],
        "function_name": "get_environment_variables",
        "module": "knowledge_base_agent.api.routes",
        "category": "Environment",
        "summary": "Get all environment variables with metadata.",
        "description": "Get all environment variables with metadata.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Environment"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/environment-variables\""
        ],
        "javascript_examples": [
          "// GET /api/environment-variables\nconst response = await fetch('http://localhost:5000/api/environment-variables', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/environment-variables\nimport requests\n\nurl = 'http://localhost:5000/api/environment-variables'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/environment-variables/<variable_name>",
          "/api/environment"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/environment-variables",
        "methods": [
          "POST"
        ],
        "function_name": "update_environment_variables",
        "module": "knowledge_base_agent.api.routes",
        "category": "Environment",
        "summary": "Update environment variables.",
        "description": "Update environment variables.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Environment"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/environment-variables\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/environment-variables\nconst response = await fetch('http://localhost:5000/api/environment-variables', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/environment-variables\nimport requests\n\nurl = 'http://localhost:5000/api/environment-variables'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/environment-variables/<variable_name>",
          "/api/environment"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/environment-variables/<variable_name>",
        "methods": [
          "DELETE"
        ],
        "function_name": "delete_environment_variable",
        "module": "knowledge_base_agent.api.routes",
        "category": "Environment",
        "summary": "Delete an environment variable.",
        "description": "Delete an environment variable.",
        "path_parameters": [
          {
            "name": "variable_name",
            "type": "string",
            "required": true,
            "description": "Environment variable name",
            "example": "example_name",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Deleted successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Deleted"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Environment"
        ],
        "curl_examples": [
          "curl -X DELETE \\\n  \"http://localhost:5000/api/environment-variables/example\""
        ],
        "javascript_examples": [
          "// DELETE /api/environment-variables/<variable_name>\nconst response = await fetch('http://localhost:5000/api/environment-variables/example', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# DELETE /api/environment-variables/<variable_name>\nimport requests\n\nurl = 'http://localhost:5000/api/environment-variables/example'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/environment-variables",
          "/api/environment-variables",
          "/api/environment"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/environment",
        "methods": [
          "GET"
        ],
        "function_name": "get_environment_settings",
        "module": "knowledge_base_agent.api.routes",
        "category": "Environment",
        "summary": "Returns environment settings from the config.",
        "description": "Returns environment settings from the config.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Environment"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/environment\""
        ],
        "javascript_examples": [
          "// GET /api/environment\nconst response = await fetch('http://localhost:5000/api/environment', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/environment\nimport requests\n\nurl = 'http://localhost:5000/api/environment'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/environment-variables",
          "/api/environment-variables",
          "/api/environment-variables/<variable_name>"
        ],
        "workflow_context": null,
        "error_scenarios": []
      }
    ],
    "System Utilities": [
      {
        "path": "/api/utilities/celery/clear-queue",
        "methods": [
          "POST"
        ],
        "function_name": "clear_celery_queue",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Clear all pending tasks from Celery queue.",
        "description": "Clear all pending tasks from Celery queue.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/utilities/celery/clear-queue\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/utilities/celery/clear-queue\nconst response = await fetch('http://localhost:5000/api/utilities/celery/clear-queue', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/utilities/celery/clear-queue\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/clear-queue'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis",
          "/api/utilities/system/cleanup-temp"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/utilities/celery/purge-all",
        "methods": [
          "POST"
        ],
        "function_name": "purge_all_celery_tasks",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Purge all Celery tasks (pending, active, reserved).",
        "description": "Purge all Celery tasks (pending, active, reserved).",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/utilities/celery/purge-all\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/utilities/celery/purge-all\nconst response = await fetch('http://localhost:5000/api/utilities/celery/purge-all', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/utilities/celery/purge-all\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/purge-all'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis",
          "/api/utilities/system/cleanup-temp"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/utilities/celery/restart-workers",
        "methods": [
          "POST"
        ],
        "function_name": "restart_celery_workers",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Restart Celery workers.",
        "description": "Restart Celery workers.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 201,
            "description": "Created successfully",
            "schema": null,
            "example": {
              "success": true,
              "id": 1
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/utilities/celery/restart-workers\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/utilities/celery/restart-workers\nconst response = await fetch('http://localhost:5000/api/utilities/celery/restart-workers', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/utilities/celery/restart-workers\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/restart-workers'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis",
          "/api/utilities/system/cleanup-temp"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Agent already running - returns 400",
          "Invalid preferences format - returns 400",
          "System resources unavailable - returns 503",
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/utilities/celery/status",
        "methods": [
          "GET"
        ],
        "function_name": "get_celery_status",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Get Celery worker and task status.",
        "description": "Get Celery worker and task status.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/utilities/celery/status\""
        ],
        "javascript_examples": [
          "// GET /api/utilities/celery/status\nconst response = await fetch('http://localhost:5000/api/utilities/celery/status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/utilities/celery/status\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/system/clear-redis",
          "/api/utilities/system/cleanup-temp"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/utilities/system/clear-redis",
        "methods": [
          "POST"
        ],
        "function_name": "clear_redis_cache",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Clear Redis cache.",
        "description": "Clear Redis cache.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/utilities/system/clear-redis\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/utilities/system/clear-redis\nconst response = await fetch('http://localhost:5000/api/utilities/system/clear-redis', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/utilities/system/clear-redis\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/system/clear-redis'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/cleanup-temp"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/utilities/system/cleanup-temp",
        "methods": [
          "POST"
        ],
        "function_name": "cleanup_temp_files",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Cleanup temporary files.",
        "description": "Cleanup temporary files.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object"
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/utilities/system/cleanup-temp\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
        ],
        "javascript_examples": [
          "// POST /api/utilities/system/cleanup-temp\nconst response = await fetch('http://localhost:5000/api/utilities/system/cleanup-temp', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/utilities/system/cleanup-temp\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/system/cleanup-temp'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/utilities/system/health-check",
        "methods": [
          "GET"
        ],
        "function_name": "system_health_check",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Perform system health check.",
        "description": "Perform system health check.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/utilities/system/health-check\""
        ],
        "javascript_examples": [
          "// GET /api/utilities/system/health-check\nconst response = await fetch('http://localhost:5000/api/utilities/system/health-check', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/utilities/system/health-check\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/system/health-check'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/utilities/debug/export-logs",
        "methods": [
          "GET"
        ],
        "function_name": "export_logs",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Export all logs as a downloadable file.",
        "description": "Export all logs as a downloadable file.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/utilities/debug/export-logs\""
        ],
        "javascript_examples": [
          "// GET /api/utilities/debug/export-logs\nconst response = await fetch('http://localhost:5000/api/utilities/debug/export-logs', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/utilities/debug/export-logs\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/debug/export-logs'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/utilities/debug/test-connections",
        "methods": [
          "GET"
        ],
        "function_name": "test_connections",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Test all system connections.",
        "description": "Test all system connections.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/utilities/debug/test-connections\""
        ],
        "javascript_examples": [
          "// GET /api/utilities/debug/test-connections\nconst response = await fetch('http://localhost:5000/api/utilities/debug/test-connections', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/utilities/debug/test-connections\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/debug/test-connections'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/utilities/debug/info",
        "methods": [
          "GET"
        ],
        "function_name": "get_debug_info",
        "module": "knowledge_base_agent.api.routes",
        "category": "System Utilities",
        "summary": "Get system debug information.",
        "description": "Get system debug information.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "System Utilities"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/utilities/debug/info\""
        ],
        "javascript_examples": [
          "// GET /api/utilities/debug/info\nconst response = await fetch('http://localhost:5000/api/utilities/debug/info', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/utilities/debug/info\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/debug/info'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/utilities/celery/clear-queue",
          "/api/utilities/celery/purge-all",
          "/api/utilities/celery/restart-workers",
          "/api/utilities/celery/status",
          "/api/utilities/system/clear-redis"
        ],
        "workflow_context": null,
        "error_scenarios": []
      }
    ],
    "Hardware Monitoring": [
      {
        "path": "/api/gpu-stats",
        "methods": [
          "GET"
        ],
        "function_name": "api_gpu_stats",
        "module": "knowledge_base_agent.api.routes",
        "category": "Hardware Monitoring",
        "summary": "REST API: Get GPU statistics.",
        "description": "REST API: Get GPU statistics.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Hardware Monitoring"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/gpu-stats\""
        ],
        "javascript_examples": [
          "// GET /api/gpu-stats\nconst response = await fetch('http://localhost:5000/api/gpu-stats', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/gpu-stats\nimport requests\n\nurl = 'http://localhost:5000/api/gpu-stats'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/gpu-status"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/api/gpu-status",
        "methods": [
          "GET"
        ],
        "function_name": "get_gpu_status",
        "module": "knowledge_base_agent.api.routes",
        "category": "Hardware Monitoring",
        "summary": "Check comprehensive GPU status including NVIDIA, CUDA, and Ollama.",
        "description": "Check comprehensive GPU status including NVIDIA, CUDA, and Ollama.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Hardware Monitoring"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/gpu-status\""
        ],
        "javascript_examples": [
          "// GET /api/gpu-status\nconst response = await fetch('http://localhost:5000/api/gpu-status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/gpu-status\nimport requests\n\nurl = 'http://localhost:5000/api/gpu-status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/gpu-stats"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Validation error: Request failed: HTTPConnectionPool(host='localhost', port=5000): Read timed out. (read timeout=10)"
        ]
      }
    ],
    "Scheduling": [
      {
        "path": "/api/schedules",
        "methods": [
          "GET"
        ],
        "function_name": "api_get_schedules",
        "module": "knowledge_base_agent.api.routes",
        "category": "Scheduling",
        "summary": "Get all schedules.",
        "description": "Get all schedules.",
        "path_parameters": [],
        "query_parameters": [
          {
            "name": "limit",
            "type": "integer",
            "required": false,
            "description": "Maximum number of results",
            "example": 10,
            "validation": null
          },
          {
            "name": "offset",
            "type": "integer",
            "required": false,
            "description": "Number of results to skip",
            "example": 0,
            "validation": null
          }
        ],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Scheduling"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/api/schedules\""
        ],
        "javascript_examples": [
          "// GET /api/schedules\nconst response = await fetch('http://localhost:5000/api/schedules', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /api/schedules\nimport requests\n\nurl = 'http://localhost:5000/api/schedules'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>/toggle",
          "/api/schedules/<int:schedule_id>/run"
        ],
        "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
        "error_scenarios": []
      },
      {
        "path": "/api/schedules",
        "methods": [
          "POST"
        ],
        "function_name": "api_create_schedule",
        "module": "knowledge_base_agent.api.routes",
        "category": "Scheduling",
        "summary": "Create a new schedule.",
        "description": "Create a new schedule.",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "frequency": {
              "type": "string",
              "enum": [
                "manual",
                "daily",
                "weekly",
                "monthly"
              ]
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "frequency"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Scheduling"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/schedules\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
        ],
        "javascript_examples": [
          "// POST /api/schedules\nconst response = await fetch('http://localhost:5000/api/schedules', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/schedules\nimport requests\n\nurl = 'http://localhost:5000/api/schedules'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>/toggle",
          "/api/schedules/<int:schedule_id>/run"
        ],
        "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
        "error_scenarios": [
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/schedules/<int:schedule_id>",
        "methods": [
          "PUT"
        ],
        "function_name": "api_update_schedule",
        "module": "knowledge_base_agent.api.routes",
        "category": "Scheduling",
        "summary": "Update an existing schedule.",
        "description": "Update an existing schedule.",
        "path_parameters": [
          {
            "name": "schedule_id",
            "type": "integer",
            "required": true,
            "description": "Schedule identifier",
            "example": 1,
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "frequency": {
              "type": "string",
              "enum": [
                "manual",
                "daily",
                "weekly",
                "monthly"
              ]
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "frequency"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Updated successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Updated"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Scheduling"
        ],
        "curl_examples": [
          "curl -X PUT \\\n  \"http://localhost:5000/api/schedules/1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
        ],
        "javascript_examples": [
          "// PUT /api/schedules/<int:schedule_id>\nconst response = await fetch('http://localhost:5000/api/schedules/1', {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# PUT /api/schedules/<int:schedule_id>\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.put(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/schedules",
          "/api/schedules",
          "/api/schedules/<int:schedule_id>/toggle",
          "/api/schedules/<int:schedule_id>/run"
        ],
        "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
        "error_scenarios": [
          "Invalid ID format - returns 404",
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/schedules/<int:schedule_id>",
        "methods": [
          "DELETE"
        ],
        "function_name": "api_delete_schedule",
        "module": "knowledge_base_agent.api.routes",
        "category": "Scheduling",
        "summary": "Delete a schedule.",
        "description": "Delete a schedule.",
        "path_parameters": [
          {
            "name": "schedule_id",
            "type": "integer",
            "required": true,
            "description": "Schedule identifier",
            "example": 1,
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Deleted successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Deleted"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Scheduling"
        ],
        "curl_examples": [
          "curl -X DELETE \\\n  \"http://localhost:5000/api/schedules/1\""
        ],
        "javascript_examples": [
          "// DELETE /api/schedules/<int:schedule_id>\nconst response = await fetch('http://localhost:5000/api/schedules/1', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# DELETE /api/schedules/<int:schedule_id>\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/schedules",
          "/api/schedules",
          "/api/schedules/<int:schedule_id>/toggle",
          "/api/schedules/<int:schedule_id>/run"
        ],
        "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      },
      {
        "path": "/api/schedules/<int:schedule_id>/toggle",
        "methods": [
          "POST"
        ],
        "function_name": "api_toggle_schedule",
        "module": "knowledge_base_agent.api.routes",
        "category": "Scheduling",
        "summary": "Toggle schedule enabled/disabled status.",
        "description": "Toggle schedule enabled/disabled status.",
        "path_parameters": [
          {
            "name": "schedule_id",
            "type": "integer",
            "required": true,
            "description": "Schedule identifier",
            "example": 1,
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "frequency": {
              "type": "string",
              "enum": [
                "manual",
                "daily",
                "weekly",
                "monthly"
              ]
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "frequency"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Scheduling"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/schedules/1/toggle\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
        ],
        "javascript_examples": [
          "// POST /api/schedules/<int:schedule_id>/toggle\nconst response = await fetch('http://localhost:5000/api/schedules/1/toggle', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/schedules/<int:schedule_id>/toggle\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1/toggle'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/schedules",
          "/api/schedules",
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>/run"
        ],
        "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
        "error_scenarios": [
          "Invalid ID format - returns 404",
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      },
      {
        "path": "/api/schedules/<int:schedule_id>/run",
        "methods": [
          "POST"
        ],
        "function_name": "api_run_schedule",
        "module": "knowledge_base_agent.api.routes",
        "category": "Scheduling",
        "summary": "Run a schedule immediately.",
        "description": "Run a schedule immediately.",
        "path_parameters": [
          {
            "name": "schedule_id",
            "type": "integer",
            "required": true,
            "description": "Schedule identifier",
            "example": 1,
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "frequency": {
              "type": "string",
              "enum": [
                "manual",
                "daily",
                "weekly",
                "monthly"
              ]
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "frequency"
          ]
        },
        "responses": [
          {
            "status_code": 200,
            "description": "Operation completed successfully",
            "schema": null,
            "example": {
              "success": true,
              "message": "Operation completed"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v1",
        "tags": [
          "Scheduling"
        ],
        "curl_examples": [
          "curl -X POST \\\n  \"http://localhost:5000/api/schedules/1/run\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
        ],
        "javascript_examples": [
          "// POST /api/schedules/<int:schedule_id>/run\nconst response = await fetch('http://localhost:5000/api/schedules/1/run', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# POST /api/schedules/<int:schedule_id>/run\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1/run'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/api/schedules",
          "/api/schedules",
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>",
          "/api/schedules/<int:schedule_id>/toggle"
        ],
        "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
        "error_scenarios": [
          "Invalid ID format - returns 404",
          "Missing required fields - returns 400",
          "Invalid JSON format - returns 400"
        ]
      }
    ],
    "Web UI (V2)": [
      {
        "path": "/v2/",
        "methods": [
          "GET"
        ],
        "function_name": "index_v2",
        "module": "knowledge_base_agent.web",
        "category": "Web UI (V2)",
        "summary": "No description available",
        "description": "",
        "path_parameters": [],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns list of items",
            "schema": null,
            "example": {
              "items": [],
              "total": 0
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Web UI (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/v2/\""
        ],
        "javascript_examples": [
          "// GET /v2/\nconst response = await fetch('http://localhost:5000/v2/', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /v2/\nimport requests\n\nurl = 'http://localhost:5000/v2/'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/v2/page/<string:page_name>"
        ],
        "workflow_context": null,
        "error_scenarios": []
      },
      {
        "path": "/v2/page/<string:page_name>",
        "methods": [
          "GET"
        ],
        "function_name": "serve_v2_page",
        "module": "knowledge_base_agent.web",
        "category": "Web UI (V2)",
        "summary": "Serves the HTML content for different pages of the V2 UI.",
        "description": "Serves the HTML content for different pages of the V2 UI.",
        "path_parameters": [
          {
            "name": "page_name",
            "type": "string",
            "required": true,
            "description": "Page name for UI routing",
            "example": "example_name",
            "validation": null
          }
        ],
        "query_parameters": [],
        "request_body": null,
        "responses": [
          {
            "status_code": 200,
            "description": "Success - returns requested item",
            "schema": null,
            "example": {
              "id": 1,
              "data": "..."
            }
          },
          {
            "status_code": 404,
            "description": "Item not found",
            "schema": null,
            "example": {
              "error": "Item not found"
            }
          },
          {
            "status_code": 400,
            "description": "Bad request - invalid parameters",
            "schema": null,
            "example": {
              "error": "Invalid request data"
            }
          },
          {
            "status_code": 500,
            "description": "Internal server error",
            "schema": null,
            "example": {
              "error": "Internal server error"
            }
          }
        ],
        "authentication_required": false,
        "rate_limited": false,
        "deprecated": false,
        "version": "v2",
        "tags": [
          "Web UI (V2)",
          "v2"
        ],
        "curl_examples": [
          "curl -X GET \\\n  \"http://localhost:5000/v2/page/example\""
        ],
        "javascript_examples": [
          "// GET /v2/page/<string:page_name>\nconst response = await fetch('http://localhost:5000/v2/page/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
        ],
        "python_examples": [
          "# GET /v2/page/<string:page_name>\nimport requests\n\nurl = 'http://localhost:5000/v2/page/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
        ],
        "related_endpoints": [
          "/v2/"
        ],
        "workflow_context": null,
        "error_scenarios": [
          "Invalid ID format - returns 404"
        ]
      }
    ]
  },
  "endpoints": [
    {
      "path": "/static/<path:filename>",
      "methods": [
        "GET"
      ],
      "function_name": "<lambda>",
      "module": "flask.app",
      "category": "Web UI",
      "summary": "No description available",
      "description": "",
      "path_parameters": [
        {
          "name": "filename",
          "type": "string",
          "required": true,
          "description": "Name of the file",
          "example": "path/to/resource",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "web",
      "tags": [
        "Web UI"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/static/path/to/file\""
      ],
      "javascript_examples": [
        "// GET /static/<path:filename>\nconst response = await fetch('http://localhost:5000/static/path/to/file', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /static/<path:filename>\nimport requests\n\nurl = 'http://localhost:5000/static/path/to/file'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/v2/agent/start",
      "methods": [
        "POST"
      ],
      "function_name": "start_agent_v2",
      "module": "knowledge_base_agent.api.routes",
      "category": "Agent Management (V2)",
      "summary": "Sync wrapper that queues an agent run. Executes async logic via asyncio.run.",
      "description": "Sync wrapper that queues an agent run. Executes async logic via asyncio.run.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "preferences": {
            "type": "object",
            "properties": {
              "run_mode": {
                "type": "string",
                "enum": [
                  "full",
                  "test",
                  "minimal"
                ]
              },
              "skip_fetch_bookmarks": {
                "type": "boolean"
              },
              "skip_process_content": {
                "type": "boolean"
              },
              "force_recache_tweets": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "preferences"
        ]
      },
      "responses": [
        {
          "status_code": 201,
          "description": "Created successfully",
          "schema": null,
          "example": {
            "success": true,
            "id": 1
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Agent Management (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/v2/agent/start\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"preferences\": {\"run_mode\": \"full\", \"skip_fetch_bookmarks\": true, \"skip_process_content\": true, \"force_recache_tweets\": true}}'"
      ],
      "javascript_examples": [
        "// POST /api/v2/agent/start\nconst response = await fetch('http://localhost:5000/api/v2/agent/start', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"preferences\": {\n    \"run_mode\": \"full\",\n    \"skip_fetch_bookmarks\": true,\n    \"skip_process_content\": true,\n    \"force_recache_tweets\": true\n  }\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/v2/agent/start\nimport requests\n\nurl = 'http://localhost:5000/api/v2/agent/start'\ndata = {\n  \"preferences\": {\n    \"run_mode\": \"full\",\n    \"skip_fetch_bookmarks\": true,\n    \"skip_process_content\": true,\n    \"force_recache_tweets\": true\n  }\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/v2/agent/status/<task_id>",
        "/api/v2/agent/stop"
      ],
      "workflow_context": "Part of the agent execution workflow. Use this to start the Knowledge Base Agent with specific preferences.",
      "error_scenarios": [
        "Agent already running - returns 400",
        "Invalid preferences format - returns 400",
        "System resources unavailable - returns 503",
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/v2/agent/status/<task_id>",
      "methods": [
        "GET"
      ],
      "function_name": "get_task_status",
      "module": "knowledge_base_agent.api.routes",
      "category": "Agent Management (V2)",
      "summary": "Sync wrapper around async status-gathering logic.",
      "description": "Sync wrapper around async status-gathering logic.",
      "path_parameters": [
        {
          "name": "task_id",
          "type": "string",
          "required": true,
          "description": "Task identifier for tracking",
          "example": "abc123",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Agent Management (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/v2/agent/status/example\""
      ],
      "javascript_examples": [
        "// GET /api/v2/agent/status/<task_id>\nconst response = await fetch('http://localhost:5000/api/v2/agent/status/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/v2/agent/status/<task_id>\nimport requests\n\nurl = 'http://localhost:5000/api/v2/agent/status/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/v2/agent/start",
        "/api/v2/agent/stop"
      ],
      "workflow_context": "Monitor agent execution progress. Poll this endpoint to track task completion.",
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/v2/agent/stop",
      "methods": [
        "POST"
      ],
      "function_name": "stop_agent_v2",
      "module": "knowledge_base_agent.api.routes",
      "category": "Agent Management (V2)",
      "summary": "Stops a running agent task via Celery.",
      "description": "Stops a running agent task via Celery.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Agent Management (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/v2/agent/stop\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/v2/agent/stop\nconst response = await fetch('http://localhost:5000/api/v2/agent/stop', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/v2/agent/stop\nimport requests\n\nurl = 'http://localhost:5000/api/v2/agent/stop'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/v2/agent/start",
        "/api/v2/agent/status/<task_id>"
      ],
      "workflow_context": "Stop running agent tasks. Use when you need to cancel ongoing operations.",
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/v2/celery/clear-queue",
      "methods": [
        "POST"
      ],
      "function_name": "clear_celery_queue_v2",
      "module": "knowledge_base_agent.api.routes",
      "category": "Celery Management (V2)",
      "summary": "Clear all tasks from Celery queue.",
      "description": "Clear all tasks from Celery queue.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Celery Management (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/v2/celery/clear-queue\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/v2/celery/clear-queue\nconst response = await fetch('http://localhost:5000/api/v2/celery/clear-queue', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/v2/celery/clear-queue\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/clear-queue'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/v2/celery/purge-tasks",
        "/api/v2/celery/restart-workers",
        "/api/v2/celery/status"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/v2/celery/purge-tasks",
      "methods": [
        "POST"
      ],
      "function_name": "purge_celery_tasks_v2",
      "module": "knowledge_base_agent.api.routes",
      "category": "Celery Management (V2)",
      "summary": "Purge all Celery tasks (active and queued).",
      "description": "Purge all Celery tasks (active and queued).",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Celery Management (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/v2/celery/purge-tasks\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/v2/celery/purge-tasks\nconst response = await fetch('http://localhost:5000/api/v2/celery/purge-tasks', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/v2/celery/purge-tasks\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/purge-tasks'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/v2/celery/clear-queue",
        "/api/v2/celery/restart-workers",
        "/api/v2/celery/status"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/v2/celery/restart-workers",
      "methods": [
        "POST"
      ],
      "function_name": "restart_celery_workers_v2",
      "module": "knowledge_base_agent.api.routes",
      "category": "Celery Management (V2)",
      "summary": "Restart Celery workers.",
      "description": "Restart Celery workers.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 201,
          "description": "Created successfully",
          "schema": null,
          "example": {
            "success": true,
            "id": 1
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Celery Management (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/v2/celery/restart-workers\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/v2/celery/restart-workers\nconst response = await fetch('http://localhost:5000/api/v2/celery/restart-workers', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/v2/celery/restart-workers\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/restart-workers'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/v2/celery/clear-queue",
        "/api/v2/celery/purge-tasks",
        "/api/v2/celery/status"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Agent already running - returns 400",
        "Invalid preferences format - returns 400",
        "System resources unavailable - returns 503",
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/v2/celery/status",
      "methods": [
        "GET"
      ],
      "function_name": "celery_worker_status_v2",
      "module": "knowledge_base_agent.api.routes",
      "category": "Celery Management (V2)",
      "summary": "Get Celery worker status.",
      "description": "Get Celery worker status.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Celery Management (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/v2/celery/status\""
      ],
      "javascript_examples": [
        "// GET /api/v2/celery/status\nconst response = await fetch('http://localhost:5000/api/v2/celery/status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/v2/celery/status\nimport requests\n\nurl = 'http://localhost:5000/api/v2/celery/status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/v2/celery/clear-queue",
        "/api/v2/celery/purge-tasks",
        "/api/v2/celery/restart-workers"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/agent/status",
      "methods": [
        "GET"
      ],
      "function_name": "get_agent_status",
      "module": "knowledge_base_agent.api.routes",
      "category": "Agent Management",
      "summary": "Synchronous wrapper around get_task_status to avoid AsyncToSync errors",
      "description": "when running Flask on gevent.  Executes the coroutine in its own event\nloop with ``asyncio.run``.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Agent Management"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/agent/status\""
      ],
      "javascript_examples": [
        "// GET /api/agent/status\nconst response = await fetch('http://localhost:5000/api/agent/status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/agent/status\nimport requests\n\nurl = 'http://localhost:5000/api/agent/status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/agent/status_legacy",
        "/api/agent/reset"
      ],
      "workflow_context": "Monitor agent execution progress. Poll this endpoint to track task completion.",
      "error_scenarios": []
    },
    {
      "path": "/api/media/<path:path>",
      "methods": [
        "GET"
      ],
      "function_name": "serve_kb_media_generic",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "Serve media files from the knowledge base directory.",
      "description": "Serve media files from the knowledge base directory.",
      "path_parameters": [
        {
          "name": "path",
          "type": "string",
          "required": true,
          "description": "Path parameter",
          "example": "path/to/resource",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/media/path/to/file\""
      ],
      "javascript_examples": [
        "// GET /api/media/<path:path>\nconst response = await fetch('http://localhost:5000/api/media/path/to/file', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/media/<path:path>\nimport requests\n\nurl = 'http://localhost:5000/api/media/path/to/file'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses",
        "/api/schedule-history"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/schedule",
      "methods": [
        "POST",
        "GET"
      ],
      "function_name": "schedule_endpoint",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "V1 LEGACY ENDPOINT: Simulates schedule handling for backward compatibility.",
      "description": "V1 LEGACY ENDPOINT: Simulates schedule handling for backward compatibility.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/schedule\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'",
        "curl -X GET \\\n  \"http://localhost:5000/api/schedule\""
      ],
      "javascript_examples": [
        "// POST /api/schedule\nconst response = await fetch('http://localhost:5000/api/schedule', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);",
        "// GET /api/schedule\nconst response = await fetch('http://localhost:5000/api/schedule', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/schedule'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "# GET /api/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/schedule'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses",
        "/api/schedule-history"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/chat/models",
      "methods": [
        "GET"
      ],
      "function_name": "get_chat_models",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Returns the list of available chat models from the config.",
      "description": "Returns the list of available chat models from the config.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/chat/models\""
      ],
      "javascript_examples": [
        "// GET /api/chat/models\nconst response = await fetch('http://localhost:5000/api/chat/models', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/chat/models\nimport requests\n\nurl = 'http://localhost:5000/api/chat/models'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/models/available",
        "/api/chat/sessions"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": []
    },
    {
      "path": "/api/chat",
      "methods": [
        "POST"
      ],
      "function_name": "chat",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Handle chat interactions via API using the knowledge base agent.",
      "description": "Handle chat interactions via API using the knowledge base agent.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/chat\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
      ],
      "javascript_examples": [
        "// POST /api/chat\nconst response = await fetch('http://localhost:5000/api/chat', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/chat\nimport requests\n\nurl = 'http://localhost:5000/api/chat'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/models/available",
        "/api/chat/sessions"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/chat/enhanced",
      "methods": [
        "POST"
      ],
      "function_name": "api_chat_enhanced",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Enhanced chat API endpoint with technical expertise and rich source metadata.",
      "description": "Enhanced chat API endpoint with technical expertise and rich source metadata.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/chat/enhanced\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
      ],
      "javascript_examples": [
        "// POST /api/chat/enhanced\nconst response = await fetch('http://localhost:5000/api/chat/enhanced', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/chat/enhanced\nimport requests\n\nurl = 'http://localhost:5000/api/chat/enhanced'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/models/available",
        "/api/chat/sessions"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/chat/models/available",
      "methods": [
        "GET"
      ],
      "function_name": "api_chat_models_available",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Get available chat models.",
      "description": "Get available chat models.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/chat/models/available\""
      ],
      "javascript_examples": [
        "// GET /api/chat/models/available\nconst response = await fetch('http://localhost:5000/api/chat/models/available', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/chat/models/available\nimport requests\n\nurl = 'http://localhost:5000/api/chat/models/available'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/sessions"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": []
    },
    {
      "path": "/api/chat/sessions",
      "methods": [
        "GET"
      ],
      "function_name": "api_get_chat_sessions",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Get all chat sessions.",
      "description": "Get all chat sessions.",
      "path_parameters": [],
      "query_parameters": [
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Maximum number of results",
          "example": 10,
          "validation": null
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Number of results to skip",
          "example": 0,
          "validation": null
        }
      ],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/chat/sessions\""
      ],
      "javascript_examples": [
        "// GET /api/chat/sessions\nconst response = await fetch('http://localhost:5000/api/chat/sessions', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/chat/sessions\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/models/available"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": []
    },
    {
      "path": "/api/chat/sessions/<session_id>",
      "methods": [
        "GET"
      ],
      "function_name": "api_get_chat_session",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Get a specific chat session with messages.",
      "description": "Get a specific chat session with messages.",
      "path_parameters": [
        {
          "name": "session_id",
          "type": "string",
          "required": true,
          "description": "Chat session identifier",
          "example": "abc123",
          "validation": null
        }
      ],
      "query_parameters": [
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Maximum number of results",
          "example": 10,
          "validation": null
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Number of results to skip",
          "example": 0,
          "validation": null
        }
      ],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/chat/sessions/example\""
      ],
      "javascript_examples": [
        "// GET /api/chat/sessions/<session_id>\nconst response = await fetch('http://localhost:5000/api/chat/sessions/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/chat/sessions/<session_id>\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/models/available"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/chat/sessions",
      "methods": [
        "POST"
      ],
      "function_name": "api_create_chat_session",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Create a new chat session.",
      "description": "Create a new chat session.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/chat/sessions\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
      ],
      "javascript_examples": [
        "// POST /api/chat/sessions\nconst response = await fetch('http://localhost:5000/api/chat/sessions', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/chat/sessions\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/models/available"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/chat/sessions/<session_id>/archive",
      "methods": [
        "POST"
      ],
      "function_name": "api_archive_chat_session",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Archive/unarchive a chat session.",
      "description": "Archive/unarchive a chat session.",
      "path_parameters": [
        {
          "name": "session_id",
          "type": "string",
          "required": true,
          "description": "Chat session identifier",
          "example": "abc123",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/chat/sessions/example/archive\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"example_message\", \"model\": \"example_model\", \"session_id\": \"example_session_id\"}'"
      ],
      "javascript_examples": [
        "// POST /api/chat/sessions/<session_id>/archive\nconst response = await fetch('http://localhost:5000/api/chat/sessions/example/archive', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/chat/sessions/<session_id>/archive\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions/example/archive'\ndata = {\n  \"message\": \"example_message\",\n  \"model\": \"example_model\",\n  \"session_id\": \"example_session_id\"\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/models/available"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": [
        "Invalid ID format - returns 404",
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/chat/sessions/<session_id>",
      "methods": [
        "DELETE"
      ],
      "function_name": "api_delete_chat_session",
      "module": "knowledge_base_agent.api.routes",
      "category": "Chat & AI",
      "summary": "Delete a chat session and all its messages.",
      "description": "Delete a chat session and all its messages.",
      "path_parameters": [
        {
          "name": "session_id",
          "type": "string",
          "required": true,
          "description": "Chat session identifier",
          "example": "abc123",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Deleted successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Deleted"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Chat & AI"
      ],
      "curl_examples": [
        "curl -X DELETE \\\n  \"http://localhost:5000/api/chat/sessions/example\""
      ],
      "javascript_examples": [
        "// DELETE /api/chat/sessions/<session_id>\nconst response = await fetch('http://localhost:5000/api/chat/sessions/example', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# DELETE /api/chat/sessions/<session_id>\nimport requests\n\nurl = 'http://localhost:5000/api/chat/sessions/example'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/chat/models",
        "/api/chat",
        "/api/chat/legacy",
        "/api/chat/enhanced",
        "/api/chat/models/available"
      ],
      "workflow_context": "Interactive chat with the knowledge base. Send messages to get AI-powered responses.",
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/preferences",
      "methods": [
        "GET"
      ],
      "function_name": "get_preferences",
      "module": "knowledge_base_agent.api.routes",
      "category": "Configuration",
      "summary": "Get current user preferences.",
      "description": "Get current user preferences.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Configuration"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/preferences\""
      ],
      "javascript_examples": [
        "// GET /api/preferences\nconst response = await fetch('http://localhost:5000/api/preferences', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/preferences\nimport requests\n\nurl = 'http://localhost:5000/api/preferences'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [],
      "workflow_context": "Configure agent behavior. Set processing preferences before starting agent tasks.",
      "error_scenarios": []
    },
    {
      "path": "/api/preferences",
      "methods": [
        "POST"
      ],
      "function_name": "save_preferences",
      "module": "knowledge_base_agent.api.routes",
      "category": "Configuration",
      "summary": "Save user preferences.",
      "description": "Save user preferences.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "run_mode": {
            "type": "string"
          },
          "skip_fetch_bookmarks": {
            "type": "boolean"
          },
          "skip_process_content": {
            "type": "boolean"
          }
        }
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Configuration"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/preferences\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"run_mode\": \"example_run_mode\", \"skip_fetch_bookmarks\": true, \"skip_process_content\": true}'"
      ],
      "javascript_examples": [
        "// POST /api/preferences\nconst response = await fetch('http://localhost:5000/api/preferences', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"run_mode\": \"example_run_mode\",\n  \"skip_fetch_bookmarks\": true,\n  \"skip_process_content\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/preferences\nimport requests\n\nurl = 'http://localhost:5000/api/preferences'\ndata = {\n  \"run_mode\": \"example_run_mode\",\n  \"skip_fetch_bookmarks\": true,\n  \"skip_process_content\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [],
      "workflow_context": "Configure agent behavior. Set processing preferences before starting agent tasks.",
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/synthesis",
      "methods": [
        "GET"
      ],
      "function_name": "get_synthesis_documents",
      "module": "knowledge_base_agent.api.routes",
      "category": "Knowledge Base",
      "summary": "API endpoint to get all synthesis documents.",
      "description": "API endpoint to get all synthesis documents.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Knowledge Base"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/synthesis\""
      ],
      "javascript_examples": [
        "// GET /api/synthesis\nconst response = await fetch('http://localhost:5000/api/synthesis', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/synthesis\nimport requests\n\nurl = 'http://localhost:5000/api/synthesis'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/synthesis/<int:synthesis_id>"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/logs",
      "methods": [
        "GET"
      ],
      "function_name": "api_list_logs",
      "module": "knowledge_base_agent.api.routes",
      "category": "Logging",
      "summary": "API endpoint to list available log files.",
      "description": "API endpoint to list available log files.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Logging"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/logs\""
      ],
      "javascript_examples": [
        "// GET /api/logs\nconst response = await fetch('http://localhost:5000/api/logs', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/logs\nimport requests\n\nurl = 'http://localhost:5000/api/logs'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/logs/<filename>",
        "/api/logs/delete-all",
        "/api/logs/files",
        "/api/logs/recent",
        "/api/logs/clear"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/logs/<filename>",
      "methods": [
        "GET"
      ],
      "function_name": "api_get_log_content",
      "module": "knowledge_base_agent.api.routes",
      "category": "Logging",
      "summary": "API endpoint to get the content of a specific log file.",
      "description": "API endpoint to get the content of a specific log file.",
      "path_parameters": [
        {
          "name": "filename",
          "type": "string",
          "required": true,
          "description": "Name of the file",
          "example": "example_name",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Logging"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/logs/example\""
      ],
      "javascript_examples": [
        "// GET /api/logs/<filename>\nconst response = await fetch('http://localhost:5000/api/logs/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/logs/<filename>\nimport requests\n\nurl = 'http://localhost:5000/api/logs/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/logs",
        "/api/logs/delete-all",
        "/api/logs/files",
        "/api/logs/recent",
        "/api/logs/clear"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/logs/delete-all",
      "methods": [
        "POST"
      ],
      "function_name": "api_delete_all_logs",
      "module": "knowledge_base_agent.api.routes",
      "category": "Logging",
      "summary": "API endpoint to delete all log files.",
      "description": "API endpoint to delete all log files.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Logging"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/logs/delete-all\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/logs/delete-all\nconst response = await fetch('http://localhost:5000/api/logs/delete-all', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/logs/delete-all\nimport requests\n\nurl = 'http://localhost:5000/api/logs/delete-all'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/logs",
        "/api/logs/<filename>",
        "/api/logs/files",
        "/api/logs/recent",
        "/api/logs/clear"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/environment-variables",
      "methods": [
        "GET"
      ],
      "function_name": "get_environment_variables",
      "module": "knowledge_base_agent.api.routes",
      "category": "Environment",
      "summary": "Get all environment variables with metadata.",
      "description": "Get all environment variables with metadata.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Environment"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/environment-variables\""
      ],
      "javascript_examples": [
        "// GET /api/environment-variables\nconst response = await fetch('http://localhost:5000/api/environment-variables', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/environment-variables\nimport requests\n\nurl = 'http://localhost:5000/api/environment-variables'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/environment-variables/<variable_name>",
        "/api/environment"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/utilities/celery/clear-queue",
      "methods": [
        "POST"
      ],
      "function_name": "clear_celery_queue",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Clear all pending tasks from Celery queue.",
      "description": "Clear all pending tasks from Celery queue.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/utilities/celery/clear-queue\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/utilities/celery/clear-queue\nconst response = await fetch('http://localhost:5000/api/utilities/celery/clear-queue', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/utilities/celery/clear-queue\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/clear-queue'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis",
        "/api/utilities/system/cleanup-temp"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/utilities/celery/purge-all",
      "methods": [
        "POST"
      ],
      "function_name": "purge_all_celery_tasks",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Purge all Celery tasks (pending, active, reserved).",
      "description": "Purge all Celery tasks (pending, active, reserved).",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/utilities/celery/purge-all\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/utilities/celery/purge-all\nconst response = await fetch('http://localhost:5000/api/utilities/celery/purge-all', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/utilities/celery/purge-all\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/purge-all'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis",
        "/api/utilities/system/cleanup-temp"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/utilities/celery/restart-workers",
      "methods": [
        "POST"
      ],
      "function_name": "restart_celery_workers",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Restart Celery workers.",
      "description": "Restart Celery workers.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 201,
          "description": "Created successfully",
          "schema": null,
          "example": {
            "success": true,
            "id": 1
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/utilities/celery/restart-workers\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/utilities/celery/restart-workers\nconst response = await fetch('http://localhost:5000/api/utilities/celery/restart-workers', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/utilities/celery/restart-workers\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/restart-workers'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis",
        "/api/utilities/system/cleanup-temp"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Agent already running - returns 400",
        "Invalid preferences format - returns 400",
        "System resources unavailable - returns 503",
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/utilities/celery/status",
      "methods": [
        "GET"
      ],
      "function_name": "get_celery_status",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Get Celery worker and task status.",
      "description": "Get Celery worker and task status.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/utilities/celery/status\""
      ],
      "javascript_examples": [
        "// GET /api/utilities/celery/status\nconst response = await fetch('http://localhost:5000/api/utilities/celery/status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/utilities/celery/status\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/celery/status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/system/clear-redis",
        "/api/utilities/system/cleanup-temp"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/utilities/system/clear-redis",
      "methods": [
        "POST"
      ],
      "function_name": "clear_redis_cache",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Clear Redis cache.",
      "description": "Clear Redis cache.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/utilities/system/clear-redis\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/utilities/system/clear-redis\nconst response = await fetch('http://localhost:5000/api/utilities/system/clear-redis', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/utilities/system/clear-redis\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/system/clear-redis'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/cleanup-temp"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/utilities/system/cleanup-temp",
      "methods": [
        "POST"
      ],
      "function_name": "cleanup_temp_files",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Cleanup temporary files.",
      "description": "Cleanup temporary files.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/utilities/system/cleanup-temp\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/utilities/system/cleanup-temp\nconst response = await fetch('http://localhost:5000/api/utilities/system/cleanup-temp', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/utilities/system/cleanup-temp\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/system/cleanup-temp'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/utilities/system/health-check",
      "methods": [
        "GET"
      ],
      "function_name": "system_health_check",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Perform system health check.",
      "description": "Perform system health check.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/utilities/system/health-check\""
      ],
      "javascript_examples": [
        "// GET /api/utilities/system/health-check\nconst response = await fetch('http://localhost:5000/api/utilities/system/health-check', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/utilities/system/health-check\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/system/health-check'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/utilities/debug/export-logs",
      "methods": [
        "GET"
      ],
      "function_name": "export_logs",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Export all logs as a downloadable file.",
      "description": "Export all logs as a downloadable file.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/utilities/debug/export-logs\""
      ],
      "javascript_examples": [
        "// GET /api/utilities/debug/export-logs\nconst response = await fetch('http://localhost:5000/api/utilities/debug/export-logs', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/utilities/debug/export-logs\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/debug/export-logs'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/utilities/debug/test-connections",
      "methods": [
        "GET"
      ],
      "function_name": "test_connections",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Test all system connections.",
      "description": "Test all system connections.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/utilities/debug/test-connections\""
      ],
      "javascript_examples": [
        "// GET /api/utilities/debug/test-connections\nconst response = await fetch('http://localhost:5000/api/utilities/debug/test-connections', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/utilities/debug/test-connections\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/debug/test-connections'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/utilities/debug/info",
      "methods": [
        "GET"
      ],
      "function_name": "get_debug_info",
      "module": "knowledge_base_agent.api.routes",
      "category": "System Utilities",
      "summary": "Get system debug information.",
      "description": "Get system debug information.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "System Utilities"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/utilities/debug/info\""
      ],
      "javascript_examples": [
        "// GET /api/utilities/debug/info\nconst response = await fetch('http://localhost:5000/api/utilities/debug/info', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/utilities/debug/info\nimport requests\n\nurl = 'http://localhost:5000/api/utilities/debug/info'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/utilities/celery/clear-queue",
        "/api/utilities/celery/purge-all",
        "/api/utilities/celery/restart-workers",
        "/api/utilities/celery/status",
        "/api/utilities/system/clear-redis"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/environment-variables",
      "methods": [
        "POST"
      ],
      "function_name": "update_environment_variables",
      "module": "knowledge_base_agent.api.routes",
      "category": "Environment",
      "summary": "Update environment variables.",
      "description": "Update environment variables.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Environment"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/environment-variables\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/environment-variables\nconst response = await fetch('http://localhost:5000/api/environment-variables', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/environment-variables\nimport requests\n\nurl = 'http://localhost:5000/api/environment-variables'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/environment-variables/<variable_name>",
        "/api/environment"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/environment-variables/<variable_name>",
      "methods": [
        "DELETE"
      ],
      "function_name": "delete_environment_variable",
      "module": "knowledge_base_agent.api.routes",
      "category": "Environment",
      "summary": "Delete an environment variable.",
      "description": "Delete an environment variable.",
      "path_parameters": [
        {
          "name": "variable_name",
          "type": "string",
          "required": true,
          "description": "Environment variable name",
          "example": "example_name",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Deleted successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Deleted"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Environment"
      ],
      "curl_examples": [
        "curl -X DELETE \\\n  \"http://localhost:5000/api/environment-variables/example\""
      ],
      "javascript_examples": [
        "// DELETE /api/environment-variables/<variable_name>\nconst response = await fetch('http://localhost:5000/api/environment-variables/example', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# DELETE /api/environment-variables/<variable_name>\nimport requests\n\nurl = 'http://localhost:5000/api/environment-variables/example'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/environment-variables",
        "/api/environment-variables",
        "/api/environment"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/hardware-detection",
      "methods": [
        "GET"
      ],
      "function_name": "get_hardware_detection",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "Get detected hardware information.",
      "description": "Get detected hardware information.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/hardware-detection\""
      ],
      "javascript_examples": [
        "// GET /api/hardware-detection\nconst response = await fetch('http://localhost:5000/api/hardware-detection', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/hardware-detection\nimport requests\n\nurl = 'http://localhost:5000/api/hardware-detection'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/ollama-optimization",
        "/api/syntheses",
        "/api/schedule-history"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/ollama-optimization",
      "methods": [
        "POST"
      ],
      "function_name": "generate_ollama_optimization",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "Generate Ollama optimization settings based on hardware and profile.",
      "description": "Generate Ollama optimization settings based on hardware and profile.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/ollama-optimization\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/ollama-optimization\nconst response = await fetch('http://localhost:5000/api/ollama-optimization', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/ollama-optimization\nimport requests\n\nurl = 'http://localhost:5000/api/ollama-optimization'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/syntheses",
        "/api/schedule-history"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/syntheses",
      "methods": [
        "GET"
      ],
      "function_name": "api_synthesis_list",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "API endpoint to get all synthesis documents.",
      "description": "API endpoint to get all synthesis documents.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/syntheses\""
      ],
      "javascript_examples": [
        "// GET /api/syntheses\nconst response = await fetch('http://localhost:5000/api/syntheses', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/syntheses\nimport requests\n\nurl = 'http://localhost:5000/api/syntheses'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/schedule-history"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/gpu-stats",
      "methods": [
        "GET"
      ],
      "function_name": "api_gpu_stats",
      "module": "knowledge_base_agent.api.routes",
      "category": "Hardware Monitoring",
      "summary": "REST API: Get GPU statistics.",
      "description": "REST API: Get GPU statistics.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Hardware Monitoring"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/gpu-stats\""
      ],
      "javascript_examples": [
        "// GET /api/gpu-stats\nconst response = await fetch('http://localhost:5000/api/gpu-stats', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/gpu-stats\nimport requests\n\nurl = 'http://localhost:5000/api/gpu-stats'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/gpu-status"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/gpu-status",
      "methods": [
        "GET"
      ],
      "function_name": "get_gpu_status",
      "module": "knowledge_base_agent.api.routes",
      "category": "Hardware Monitoring",
      "summary": "Check comprehensive GPU status including NVIDIA, CUDA, and Ollama.",
      "description": "Check comprehensive GPU status including NVIDIA, CUDA, and Ollama.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Hardware Monitoring"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/gpu-status\""
      ],
      "javascript_examples": [
        "// GET /api/gpu-status\nconst response = await fetch('http://localhost:5000/api/gpu-status', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/gpu-status\nimport requests\n\nurl = 'http://localhost:5000/api/gpu-status'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/gpu-stats"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Validation error: Request failed: HTTPConnectionPool(host='localhost', port=5000): Read timed out. (read timeout=10)"
      ]
    },
    {
      "path": "/api/schedules",
      "methods": [
        "GET"
      ],
      "function_name": "api_get_schedules",
      "module": "knowledge_base_agent.api.routes",
      "category": "Scheduling",
      "summary": "Get all schedules.",
      "description": "Get all schedules.",
      "path_parameters": [],
      "query_parameters": [
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Maximum number of results",
          "example": 10,
          "validation": null
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Number of results to skip",
          "example": 0,
          "validation": null
        }
      ],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Scheduling"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/schedules\""
      ],
      "javascript_examples": [
        "// GET /api/schedules\nconst response = await fetch('http://localhost:5000/api/schedules', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/schedules\nimport requests\n\nurl = 'http://localhost:5000/api/schedules'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>/toggle",
        "/api/schedules/<int:schedule_id>/run"
      ],
      "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
      "error_scenarios": []
    },
    {
      "path": "/api/schedules",
      "methods": [
        "POST"
      ],
      "function_name": "api_create_schedule",
      "module": "knowledge_base_agent.api.routes",
      "category": "Scheduling",
      "summary": "Create a new schedule.",
      "description": "Create a new schedule.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "frequency": {
            "type": "string",
            "enum": [
              "manual",
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "frequency"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Scheduling"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/schedules\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
      ],
      "javascript_examples": [
        "// POST /api/schedules\nconst response = await fetch('http://localhost:5000/api/schedules', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/schedules\nimport requests\n\nurl = 'http://localhost:5000/api/schedules'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>/toggle",
        "/api/schedules/<int:schedule_id>/run"
      ],
      "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/schedules/<int:schedule_id>",
      "methods": [
        "PUT"
      ],
      "function_name": "api_update_schedule",
      "module": "knowledge_base_agent.api.routes",
      "category": "Scheduling",
      "summary": "Update an existing schedule.",
      "description": "Update an existing schedule.",
      "path_parameters": [
        {
          "name": "schedule_id",
          "type": "integer",
          "required": true,
          "description": "Schedule identifier",
          "example": 1,
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "frequency": {
            "type": "string",
            "enum": [
              "manual",
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "frequency"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Updated successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Updated"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Scheduling"
      ],
      "curl_examples": [
        "curl -X PUT \\\n  \"http://localhost:5000/api/schedules/1\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
      ],
      "javascript_examples": [
        "// PUT /api/schedules/<int:schedule_id>\nconst response = await fetch('http://localhost:5000/api/schedules/1', {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# PUT /api/schedules/<int:schedule_id>\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.put(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/schedules",
        "/api/schedules",
        "/api/schedules/<int:schedule_id>/toggle",
        "/api/schedules/<int:schedule_id>/run"
      ],
      "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
      "error_scenarios": [
        "Invalid ID format - returns 404",
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/schedules/<int:schedule_id>",
      "methods": [
        "DELETE"
      ],
      "function_name": "api_delete_schedule",
      "module": "knowledge_base_agent.api.routes",
      "category": "Scheduling",
      "summary": "Delete a schedule.",
      "description": "Delete a schedule.",
      "path_parameters": [
        {
          "name": "schedule_id",
          "type": "integer",
          "required": true,
          "description": "Schedule identifier",
          "example": 1,
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Deleted successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Deleted"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Scheduling"
      ],
      "curl_examples": [
        "curl -X DELETE \\\n  \"http://localhost:5000/api/schedules/1\""
      ],
      "javascript_examples": [
        "// DELETE /api/schedules/<int:schedule_id>\nconst response = await fetch('http://localhost:5000/api/schedules/1', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# DELETE /api/schedules/<int:schedule_id>\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/schedules",
        "/api/schedules",
        "/api/schedules/<int:schedule_id>/toggle",
        "/api/schedules/<int:schedule_id>/run"
      ],
      "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/schedules/<int:schedule_id>/toggle",
      "methods": [
        "POST"
      ],
      "function_name": "api_toggle_schedule",
      "module": "knowledge_base_agent.api.routes",
      "category": "Scheduling",
      "summary": "Toggle schedule enabled/disabled status.",
      "description": "Toggle schedule enabled/disabled status.",
      "path_parameters": [
        {
          "name": "schedule_id",
          "type": "integer",
          "required": true,
          "description": "Schedule identifier",
          "example": 1,
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "frequency": {
            "type": "string",
            "enum": [
              "manual",
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "frequency"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Scheduling"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/schedules/1/toggle\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
      ],
      "javascript_examples": [
        "// POST /api/schedules/<int:schedule_id>/toggle\nconst response = await fetch('http://localhost:5000/api/schedules/1/toggle', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/schedules/<int:schedule_id>/toggle\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1/toggle'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/schedules",
        "/api/schedules",
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>/run"
      ],
      "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
      "error_scenarios": [
        "Invalid ID format - returns 404",
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/schedules/<int:schedule_id>/run",
      "methods": [
        "POST"
      ],
      "function_name": "api_run_schedule",
      "module": "knowledge_base_agent.api.routes",
      "category": "Scheduling",
      "summary": "Run a schedule immediately.",
      "description": "Run a schedule immediately.",
      "path_parameters": [
        {
          "name": "schedule_id",
          "type": "integer",
          "required": true,
          "description": "Schedule identifier",
          "example": 1,
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "frequency": {
            "type": "string",
            "enum": [
              "manual",
              "daily",
              "weekly",
              "monthly"
            ]
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "frequency"
        ]
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Scheduling"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/schedules/1/run\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"example_name\", \"frequency\": \"manual\", \"enabled\": true}'"
      ],
      "javascript_examples": [
        "// POST /api/schedules/<int:schedule_id>/run\nconst response = await fetch('http://localhost:5000/api/schedules/1/run', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/schedules/<int:schedule_id>/run\nimport requests\n\nurl = 'http://localhost:5000/api/schedules/1/run'\ndata = {\n  \"name\": \"example_name\",\n  \"frequency\": \"manual\",\n  \"enabled\": true\n}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/schedules",
        "/api/schedules",
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>",
        "/api/schedules/<int:schedule_id>/toggle"
      ],
      "workflow_context": "Manage automated agent execution. Create and manage recurring agent runs.",
      "error_scenarios": [
        "Invalid ID format - returns 404",
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/schedule-history",
      "methods": [
        "GET"
      ],
      "function_name": "api_get_schedule_history",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "Get schedule execution history.",
      "description": "Get schedule execution history.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/schedule-history\""
      ],
      "javascript_examples": [
        "// GET /api/schedule-history\nconst response = await fetch('http://localhost:5000/api/schedule-history', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/schedule-history\nimport requests\n\nurl = 'http://localhost:5000/api/schedule-history'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/schedule-runs/<int:run_id>",
      "methods": [
        "DELETE"
      ],
      "function_name": "delete_schedule_run",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "API endpoint to delete a schedule run from history.",
      "description": "API endpoint to delete a schedule run from history.",
      "path_parameters": [
        {
          "name": "run_id",
          "type": "integer",
          "required": true,
          "description": "Schedule run identifier",
          "example": 1,
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Deleted successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Deleted"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X DELETE \\\n  \"http://localhost:5000/api/schedule-runs/1\""
      ],
      "javascript_examples": [
        "// DELETE /api/schedule-runs/<int:run_id>\nconst response = await fetch('http://localhost:5000/api/schedule-runs/1', {\n  method: 'DELETE'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# DELETE /api/schedule-runs/<int:run_id>\nimport requests\n\nurl = 'http://localhost:5000/api/schedule-runs/1'\nresponse = requests.delete(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/environment",
      "methods": [
        "GET"
      ],
      "function_name": "get_environment_settings",
      "module": "knowledge_base_agent.api.routes",
      "category": "Environment",
      "summary": "Returns environment settings from the config.",
      "description": "Returns environment settings from the config.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Environment"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/environment\""
      ],
      "javascript_examples": [
        "// GET /api/environment\nconst response = await fetch('http://localhost:5000/api/environment', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/environment\nimport requests\n\nurl = 'http://localhost:5000/api/environment'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/environment-variables",
        "/api/environment-variables",
        "/api/environment-variables/<variable_name>"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/kb/all",
      "methods": [
        "GET"
      ],
      "function_name": "get_kb_all",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "Returns a JSON object with all KB items and syntheses for the TOC.",
      "description": "Returns a JSON object with all KB items and syntheses for the TOC.",
      "path_parameters": [],
      "query_parameters": [
        {
          "name": "limit",
          "type": "integer",
          "required": false,
          "description": "Maximum number of results",
          "example": 10,
          "validation": null
        },
        {
          "name": "offset",
          "type": "integer",
          "required": false,
          "description": "Number of results to skip",
          "example": 0,
          "validation": null
        }
      ],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/kb/all\""
      ],
      "javascript_examples": [
        "// GET /api/kb/all\nconst response = await fetch('http://localhost:5000/api/kb/all', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/kb/all\nimport requests\n\nurl = 'http://localhost:5000/api/kb/all'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/v2/schedule",
      "methods": [
        "POST",
        "GET"
      ],
      "function_name": "schedule_v2_endpoint",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "V2 ENDPOINT: Handles getting and setting the agent execution schedule from the database.",
      "description": "V2 ENDPOINT: Handles getting and setting the agent execution schedule from the database.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "API",
        "v2"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/v2/schedule\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'",
        "curl -X GET \\\n  \"http://localhost:5000/api/v2/schedule\""
      ],
      "javascript_examples": [
        "// POST /api/v2/schedule\nconst response = await fetch('http://localhost:5000/api/v2/schedule', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);",
        "// GET /api/v2/schedule\nconst response = await fetch('http://localhost:5000/api/v2/schedule', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/v2/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/v2/schedule'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")",
        "# GET /api/v2/schedule\nimport requests\n\nurl = 'http://localhost:5000/api/v2/schedule'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/logs/files",
      "methods": [
        "GET"
      ],
      "function_name": "get_log_files",
      "module": "knowledge_base_agent.api.routes",
      "category": "Logging",
      "summary": "API endpoint to get a list of log files.",
      "description": "API endpoint to get a list of log files.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Logging"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/logs/files\""
      ],
      "javascript_examples": [
        "// GET /api/logs/files\nconst response = await fetch('http://localhost:5000/api/logs/files', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/logs/files\nimport requests\n\nurl = 'http://localhost:5000/api/logs/files'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/logs",
        "/api/logs/<filename>",
        "/api/logs/delete-all",
        "/api/logs/recent",
        "/api/logs/clear"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/items/<int:item_id>",
      "methods": [
        "GET"
      ],
      "function_name": "get_kb_item",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "API endpoint for getting KB item data in JSON format.",
      "description": "API endpoint for getting KB item data in JSON format.",
      "path_parameters": [
        {
          "name": "item_id",
          "type": "integer",
          "required": true,
          "description": "Knowledge base item identifier",
          "example": 1,
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/items/1\""
      ],
      "javascript_examples": [
        "// GET /api/items/<int:item_id>\nconst response = await fetch('http://localhost:5000/api/items/1', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/items/<int:item_id>\nimport requests\n\nurl = 'http://localhost:5000/api/items/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/synthesis/<int:synthesis_id>",
      "methods": [
        "GET"
      ],
      "function_name": "get_synthesis_item",
      "module": "knowledge_base_agent.api.routes",
      "category": "Knowledge Base",
      "summary": "API endpoint for getting synthesis data in JSON format.",
      "description": "API endpoint for getting synthesis data in JSON format.",
      "path_parameters": [
        {
          "name": "synthesis_id",
          "type": "integer",
          "required": true,
          "description": "Synthesis document identifier",
          "example": 1,
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Knowledge Base"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/synthesis/1\""
      ],
      "javascript_examples": [
        "// GET /api/synthesis/<int:synthesis_id>\nconst response = await fetch('http://localhost:5000/api/synthesis/1', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/synthesis/<int:synthesis_id>\nimport requests\n\nurl = 'http://localhost:5000/api/synthesis/1'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/synthesis"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    },
    {
      "path": "/api/agent/reset",
      "methods": [
        "POST"
      ],
      "function_name": "reset_agent_state",
      "module": "knowledge_base_agent.api.routes",
      "category": "Agent Management",
      "summary": "Resets the agent's database state to idle.",
      "description": "Resets the agent's database state to idle.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Agent Management"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/agent/reset\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/agent/reset\nconst response = await fetch('http://localhost:5000/api/agent/reset', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/agent/reset\nimport requests\n\nurl = 'http://localhost:5000/api/agent/reset'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/agent/status",
        "/api/agent/status_legacy"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/system/info",
      "methods": [
        "GET"
      ],
      "function_name": "get_system_info",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "Get comprehensive system information.",
      "description": "Get comprehensive system information.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "API"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/system/info\""
      ],
      "javascript_examples": [
        "// GET /api/system/info\nconst response = await fetch('http://localhost:5000/api/system/info', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/system/info\nimport requests\n\nurl = 'http://localhost:5000/api/system/info'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/logs/recent",
      "methods": [
        "GET"
      ],
      "function_name": "get_recent_logs",
      "module": "knowledge_base_agent.api.routes",
      "category": "Logging",
      "summary": "Get recent log messages from Redis via TaskProgressManager.",
      "description": "Get recent log messages from Redis via TaskProgressManager.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Logging"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/api/logs/recent\""
      ],
      "javascript_examples": [
        "// GET /api/logs/recent\nconst response = await fetch('http://localhost:5000/api/logs/recent', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /api/logs/recent\nimport requests\n\nurl = 'http://localhost:5000/api/logs/recent'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/logs",
        "/api/logs/<filename>",
        "/api/logs/delete-all",
        "/api/logs/files",
        "/api/logs/clear"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/api/logs/clear",
      "methods": [
        "POST"
      ],
      "function_name": "clear_recent_logs",
      "module": "knowledge_base_agent.api.routes",
      "category": "Logging",
      "summary": "REST API: Clear the in-memory log buffer.",
      "description": "REST API: Clear the in-memory log buffer.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v1",
      "tags": [
        "Logging"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/logs/clear\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/logs/clear\nconst response = await fetch('http://localhost:5000/api/logs/clear', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/logs/clear\nimport requests\n\nurl = 'http://localhost:5000/api/logs/clear'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/logs",
        "/api/logs/<filename>",
        "/api/logs/delete-all",
        "/api/logs/files",
        "/api/logs/recent"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/api/v2/logs/clear",
      "methods": [
        "POST"
      ],
      "function_name": "clear_logs_v2",
      "module": "knowledge_base_agent.api.routes",
      "category": "API",
      "summary": "V2 API: Clear all server-side logs.",
      "description": "V2 API: Clear all server-side logs.",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": {
        "type": "object"
      },
      "responses": [
        {
          "status_code": 200,
          "description": "Operation completed successfully",
          "schema": null,
          "example": {
            "success": true,
            "message": "Operation completed"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "API",
        "v2"
      ],
      "curl_examples": [
        "curl -X POST \\\n  \"http://localhost:5000/api/v2/logs/clear\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{}'"
      ],
      "javascript_examples": [
        "// POST /api/v2/logs/clear\nconst response = await fetch('http://localhost:5000/api/v2/logs/clear', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({})\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# POST /api/v2/logs/clear\nimport requests\n\nurl = 'http://localhost:5000/api/v2/logs/clear'\ndata = {}\nresponse = requests.post(url, json=data)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/api/media/<path:path>",
        "/api/schedule",
        "/api/hardware-detection",
        "/api/ollama-optimization",
        "/api/syntheses"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Missing required fields - returns 400",
        "Invalid JSON format - returns 400"
      ]
    },
    {
      "path": "/",
      "methods": [
        "GET"
      ],
      "function_name": "index",
      "module": "knowledge_base_agent.web",
      "category": "Web UI",
      "summary": "No description available",
      "description": "",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "web",
      "tags": [
        "Web UI"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/\""
      ],
      "javascript_examples": [
        "// GET /\nconst response = await fetch('http://localhost:5000/', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /\nimport requests\n\nurl = 'http://localhost:5000/'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/static/<path:filename>"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/v2/",
      "methods": [
        "GET"
      ],
      "function_name": "index_v2",
      "module": "knowledge_base_agent.web",
      "category": "Web UI (V2)",
      "summary": "No description available",
      "description": "",
      "path_parameters": [],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns list of items",
          "schema": null,
          "example": {
            "items": [],
            "total": 0
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Web UI (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/v2/\""
      ],
      "javascript_examples": [
        "// GET /v2/\nconst response = await fetch('http://localhost:5000/v2/', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /v2/\nimport requests\n\nurl = 'http://localhost:5000/v2/'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/v2/page/<string:page_name>"
      ],
      "workflow_context": null,
      "error_scenarios": []
    },
    {
      "path": "/v2/page/<string:page_name>",
      "methods": [
        "GET"
      ],
      "function_name": "serve_v2_page",
      "module": "knowledge_base_agent.web",
      "category": "Web UI (V2)",
      "summary": "Serves the HTML content for different pages of the V2 UI.",
      "description": "Serves the HTML content for different pages of the V2 UI.",
      "path_parameters": [
        {
          "name": "page_name",
          "type": "string",
          "required": true,
          "description": "Page name for UI routing",
          "example": "example_name",
          "validation": null
        }
      ],
      "query_parameters": [],
      "request_body": null,
      "responses": [
        {
          "status_code": 200,
          "description": "Success - returns requested item",
          "schema": null,
          "example": {
            "id": 1,
            "data": "..."
          }
        },
        {
          "status_code": 404,
          "description": "Item not found",
          "schema": null,
          "example": {
            "error": "Item not found"
          }
        },
        {
          "status_code": 400,
          "description": "Bad request - invalid parameters",
          "schema": null,
          "example": {
            "error": "Invalid request data"
          }
        },
        {
          "status_code": 500,
          "description": "Internal server error",
          "schema": null,
          "example": {
            "error": "Internal server error"
          }
        }
      ],
      "authentication_required": false,
      "rate_limited": false,
      "deprecated": false,
      "version": "v2",
      "tags": [
        "Web UI (V2)",
        "v2"
      ],
      "curl_examples": [
        "curl -X GET \\\n  \"http://localhost:5000/v2/page/example\""
      ],
      "javascript_examples": [
        "// GET /v2/page/<string:page_name>\nconst response = await fetch('http://localhost:5000/v2/page/example', {\n  method: 'GET'\n});\n\nconst data = await response.json();\nconsole.log(data);"
      ],
      "python_examples": [
        "# GET /v2/page/<string:page_name>\nimport requests\n\nurl = 'http://localhost:5000/v2/page/example'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    result = response.json()\n    print(result)\nelse:\n    print(f\"Error: {response.status_code} - {response.text}\")"
      ],
      "related_endpoints": [
        "/v2/"
      ],
      "workflow_context": null,
      "error_scenarios": [
        "Invalid ID format - returns 404"
      ]
    }
  ]
}